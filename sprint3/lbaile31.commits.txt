./frontend/src/utils/auth.js
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500  2) import { sendGet } from './requests';
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 34)     async validateToken() {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 35)         if (!this.loggedIn()) {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 36)             return false;
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 37)         }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 38)         const response = await sendGet('/api/users/validate-token/');
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 39)         return (
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 40)             response.ok && response.data?.success
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 41)         );
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 42)     }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 43) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 48)     removeToken() {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 49)         localStorage.removeItem('id_token');
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 50)     }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 51) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 63)         this.removeToken();


./frontend/src/utils/requests.js
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 45)     return await setData(res);
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 46) }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 47) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 48) // Default method to send a DELETE request
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 49) export const sendDelete = async (url, data) => {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 50)     const res = await fetch(url, {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 51)       method: 'DELETE',
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 52)       body: JSON.stringify(data),
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 53)       headers: {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 54)         ...getDefaultHeaders(),
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 55)         'Content-Type': 'application/json',
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 56)       }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 57)     })
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 58)


./frontend/src/components/FilterBar.js
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500   7) import auth from '../utils/auth';
a665bdcb (LakelonBailey 2023-10-27 08:19:38 -0400  98)             borderRight: '1px solid lightgray',
a665bdcb (LakelonBailey 2023-10-27 08:19:38 -0400  99)             height: '100%',
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 101)             {true && (
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 102)                 <h4>
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 103)                     <span style={{
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 104)                         marginRight: '12px'
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 105)                     }}>
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 106)                         Filters
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 107)                     </span>
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 114)                 </h4>
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 115)             )}
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 116)             <Form style={{
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 117)                 maxHeight: '95%',
7b7f1fba (LakelonBailey 2023-11-05 14:06:14 -0500 118)                 overflowY: 'auto',
7b7f1fba (LakelonBailey 2023-11-05 14:06:14 -0500 119)                 overflowX: 'hidden'
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 120)             }}>
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 121)                 {auth.loggedIn() && (
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 122)                     <Form.Group style={{margin: '12px 0'}}>
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 123)                         <Form.Label><strong>Watchlist</strong></Form.Label>
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 124)                         <Form.Group>
79a90afe (LakelonBailey 2023-11-05 18:09:36 -0500 125)                             <Form.Select name='watchlisted' onChange={handleFormChange} value={searchObject.watchlisted}>
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 126)                                 <option value=''>All</option>
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 127)                                 <option value={true}>Watchlisted Only</option>
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 128)                                 <option value={false}>Un-watchlisted Only</option>
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 129)                             </Form.Select>
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 130)                         </Form.Group>
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 131)                     </Form.Group>
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 132)                 )}
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 140)                                 name='priceStart'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 142)                                 value={getRangeValue(searchObject.priceStart, maxPrice)}
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 149)                                     name='priceStart'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 150)                                     value={searchObject.priceStart}
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 160)                                 name='priceEnd'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 162)                                 value={getRangeValue(searchObject.priceEnd, maxPrice)}
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 169)                                     name='priceEnd'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 170)                                     value={searchObject.priceEnd}
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 185)                                 name='sizeStart'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 187)                                 value={getRangeValue(searchObject.sizeStart, maxSize)}
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 193)                                     name='sizeStart'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 194)                                     value={searchObject.sizeStart}
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 205)                                 name='sizeEnd'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 207)                                 value={getRangeValue(searchObject.sizeEnd, maxSize)}
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 213)                                     name='sizeEnd'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 214)                                     value={searchObject.sizeEnd}
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 228)                                 <option key={i} value={option}>{option}</option>
7b7f1fba (LakelonBailey 2023-11-05 14:06:14 -0500 235)                     <Form.Group style={{
7b7f1fba (LakelonBailey 2023-11-05 14:06:14 -0500 236)                         maxHeight: '40vh',
7b7f1fba (LakelonBailey 2023-11-05 14:06:14 -0500 237)                         overflowY: 'auto'
7b7f1fba (LakelonBailey 2023-11-05 14:06:14 -0500 238)                     }}>


./frontend/src/components/AuthForm.js
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500  1) import { Container, Row, Col, Toast } from 'react-bootstrap';
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  2) import Navigation from "./Navigation";
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  3) import '../assets/css/auth.css';
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  4) 
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  5) function AuthForm({ setShowToast, showToast, errorMessage, children}) {
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  6)   return (
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  7)     <Container fluid className="auth-container">
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  8)         <Navigation />
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  9)       <Row className="justify-content-center align-items-center">
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 10)         <Col md={6} lg={4}>
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 11)           <div className="auth-box">
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 12)             {children}
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 13)             <Toast
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 14)             onClose={() => setShowToast(false)}
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 15)             show={showToast}
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 16)             delay={3000}
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 17)             autohide
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 18)             bg="warning"
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 19)             className="d-inline-block m-1 w-100"
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 20)             position="middle-center"
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 21)           >
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 22)             <Toast.Body><strong>{errorMessage}</strong></Toast.Body>
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 23)           </Toast>
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 24)           </div>
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 25)         </Col>
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 26)       </Row>
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 27)     </Container>
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 28)   );
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 29) }
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 30) 
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 31) export default AuthForm;


./frontend/src/components/Browsing.js
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400   1) import React, {useEffect, useState, useRef, useCallback} from 'react';
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  12) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  13)     /*
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  14)     STATES
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  15)     */
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  20)     const [searchInput, setSearchInput] = useState('');
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  21)     const isFirstRender = useRef(true);
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  22)     const totalRows = useRef(0);
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  23)     const paginationPage = useRef(0);
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  24)     const [showSidebar, setShowSidebar] = useState(false);
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  30)     const sortByOptions = {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  31)       none: {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  32)         val: '',
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  33)         name: 'None'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  34)       },
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  35)       title_ASC: {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  36)           val: 'title,ASC',
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  37)           name: 'Title (A -> Z)'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  38)       },
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  39)       title_DESC: {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  40)         val: 'title,DESC',
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  41)         name: 'Title (Z -> A)'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  42)       },
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  43)       brand_ASC: {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  44)         val: 'brand,ASC',
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  45)         name: 'Brand (A -> Z)'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  46)       },
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  47)       brand_DESC: {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  48)         val: 'brand,DESC',
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  49)         name: 'Brand (Z -> A)'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  50)       },
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  51)       price_DESC: {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  52)           val: 'price,DESC',
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  53)           name: 'Price (high -> low)'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  54)       },
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  55)       price_ASC: {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  56)           val: 'price,ASC',
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  57)           name: 'Price (low -> high)'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  58)       },
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  59)       size_DESC: {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  60)           val: 'sizeoz,DESC',
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  61)           name: 'Size (high -> low)'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  62)       },
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  63)       size_ASC: {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  64)           val: 'sizeoz,ASC',
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  65)           name: 'Size (low -> high)'
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  66)       },
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  67)     }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  68)     const [sortBy, setSortBy] = useState(sortByOptions.none);
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  71)       priceStart: 0,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  72)       priceEnd: searchDefaults.maxPrice,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  73)       sizeStart: 0,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  74)       sizeEnd: searchDefaults.maxSize,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  76)       gender: 'All',
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  77)       sortBy: sortBy.val,
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  78)       watchlisted: ''
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  82)     const [fragranceListings, setFragranceListings] = useState([]);
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  83)     const fragranceListingsRef = useRef(fragranceListings);
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  85)     /*
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  86)     FUNCTIONS
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  87)     */
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  88)     const showFilters = () => setShowSidebar(true);
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  89) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  90)     const hideFilters = () => setShowSidebar(false);
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  91) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  92)     const updateScreenState = () => {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  93)         setUseOffcanvasFilters(
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  94)             window.innerWidth < SMALL_SCREEN_CUTOFF
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  95)         );
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  96)     };
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500  97)     console.log(fragranceListings.length);
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  99)     const searchFragrances = useCallback(async (params, page) => {
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 100)       const {append, ...searchParams} = params;
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 103)           `${url}?${new URLSearchParams({
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 104)             ...searchParams,
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 105)             page: page || 0
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 106)           }).toString()}`
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 109)           totalRows.current = response.data.totalCount;
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 110) 
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 111)           // If append is true, we are using progressive load and
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 112)           // need to add new fragrances to existing fragrances
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 113)           if (append) {
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 114)             fragranceListingsRef.current = fragranceListingsRef.current.concat(
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 115)               response.data.data
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 116)             );
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 117)             setFragranceListings(fragranceListingsRef.current);
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 118)           }
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 119)           else {
a894fa60 (LakelonBailey 2023-11-04 02:13:59 -0400 120)             paginationPage.current = 0;
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 121)             fragranceListingsRef.current = response.data.data;
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 122)             setFragranceListings(fragranceListingsRef.current);
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 123)           }
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 124)       }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 125)     }, []);
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 126) 
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 127)     // If we haven't reached the total rows,
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 128)     // query more fragrance listings
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 129)     const loadMoreListings = () => {
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 130)       if (fragranceListings.length < totalRows.current) {
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 131)         searchFragrances({
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 132)           ...searchObject,
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 133)           searchInput: searchInput,
e7935b4b (LakelonBailey 2023-11-07 10:49:12 -0500 134)           sortBy: sortBy.val,
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 135)           append: true
e7935b4b (LakelonBailey 2023-11-07 10:49:12 -0500 136)         }, ++paginationPage.current);
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 140)     // Get the default values for the filters
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 151)         priceEnd: newMaxPrice,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 152)         sizeEnd: newMaxSize
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 157)         priceEnd: newMaxPrice,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 158)         sizeEnd: newMaxSize
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 162)     /*
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 163)     EFFECTS
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 164)     */
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 165)     useEffect(() => {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 166)         window.addEventListener('resize', updateScreenState);
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 167) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 168)         return () => {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 169)             window.removeEventListener('resize', updateScreenState);
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 170)         }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 171)     }, []);
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 172) 
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 173)     // We don't want to search fragrance listings on the
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 174)     // first render since we want to get searchDefaults first
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 176)       if (isFirstRender.current) {
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 177)         isFirstRender.current = false;
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 178)         getSearchDefaults();
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 179)         return;
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 180)       }
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 181)       else {
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 182)         searchFragrances({
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 183)           ...searchObject,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 184)           searchInput: searchInput,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 185)           sortBy: sortBy.val
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 186)         });
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 187)       }
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 188) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 189)     }, [searchInput, sortBy]);
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 190) 
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 200)     // Collect props
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 201)     const filterBarProps = {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 202)       searchObject: searchObject,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 203)       setSearchObject: setSearchObject,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 204)       searchFragrances: searchFragrances,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 205)       defaultSearchObject: defaultSearchObject,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 206)       searchDefaults: searchDefaults,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 207)       useSidebarFilter: useOffcanvasFilters,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 208)       hideFilters: hideFilters
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 209)     }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 211)     const fragranceListingsProps = {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 212)       fragranceListings: fragranceListings,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 213)       showFilters: showFilters,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 214)       useOffcanvasFilters: useOffcanvasFilters,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 215)       setSearchInput: setSearchInput,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 216)       totalRows: totalRows.current,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 217)       loadMoreListings: loadMoreListings,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 218)       sortBy: sortBy,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 219)       setSortBy: setSortBy,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 220)       sortByOptions: sortByOptions
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 221)     }
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 230)               <Offcanvas.Header closeButton style={{
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 231)                 display: 'flex',
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 232)                 justifyContent: 'end'
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 233)               }}/>
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 237)                 {...filterBarProps}
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 243)               {...fragranceListingsProps}
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 257)               {...filterBarProps}
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 259)               <FragranceListings
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 260)               xs={8}
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 261)               {...fragranceListingsProps}
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 262)               />


./frontend/src/components/Navigation.js
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  8) import '../assets/css/navbar.css';
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 14)     <Navbar className="navigation bg-body-tertiary" style={style}>
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 23)                Signed in as: {profile.firstName} {profile.lastName}
dc34a5c0 (LakelonBailey 2023-11-08 17:07:51 -0500 26)               <NavDropdown.Item href="#logout" onClick={() => auth.logout()}>


./frontend/src/components/FragranceListings.js
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500   1) import React, {useEffect, useRef, useState} from "react";
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400   6) import InputGroup from 'react-bootstrap/InputGroup'
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400   7) import Form from "react-bootstrap/Form";
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500   8) import Dropdown from "react-bootstrap/Dropdown";
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500   9) import DropdownButton from 'react-bootstrap/DropdownButton';
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  10) import FragranceListingCard from "./FragranceListingCard";
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  11) import Modal from "react-bootstrap/Modal";
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500  13) const PROGRESSIVE_LOADING_TRIGGER_DIFF = 5; // pixels;
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  14) function FragranceListings({
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  15)     xs,
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  16)     fragranceListings,
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  17)     showFilters,
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  18)     useOffcanvasFilters,
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  19)     setSearchInput,
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  20)     loadMoreListings,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  21)     totalRows,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  22)     sortBy,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  23)     setSortBy,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  24)     sortByOptions
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  25) }){
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  26)     const tempSearchInput = useRef('');
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  27)     const containerRef = useRef(null);
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  29)     const [showLoginModal, setShowLoginModal] = useState(false);
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  30)     const [fragranceWatchlistedMapper, setFragranceWatchlistedMapper] = useState({});
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  31) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  32)     const handleCloseLoginModal = () => setShowLoginModal(false);
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  33)     const handleShowLoginModal = () => setShowLoginModal(true);
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  35)     const handleSearchInputSubmit = (event) => {
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  36)         event.preventDefault();
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  37)         setSearchInput(tempSearchInput.current);
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  38)         containerRef.current.scrollTop = 0;
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  40) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  41)     useEffect(() => {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  42)         const mapping = Object.fromEntries(
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  43)             fragranceListings.map(l => [l.fragrance.id, l.fragrance.watchlisted])
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  44)         );
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  45)         setFragranceWatchlistedMapper(mapping);
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  46)     }, [fragranceListings])
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  48)     // Scroll event handler
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  49)     const onScroll = () => {
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  50)         const container = containerRef.current;
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  51) 
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  52)         // Check if the user has scrolled to the bottom
e7935b4b (LakelonBailey 2023-11-07 10:49:12 -0500  53)         const diff = Math.round(container.scrollHeight - container.scrollTop) - container.clientHeight;
e7935b4b (LakelonBailey 2023-11-07 10:49:12 -0500  54)         if (diff < PROGRESSIVE_LOADING_TRIGGER_DIFF) {
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  55)             loadMoreListings();
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  56)         }
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400  57)     }
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  59)         <>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  60)             <Col xs={xs} style={{
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  61)                 maxHeight: '100%',
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  62)             }}>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  63)                 <Form onSubmit={handleSearchInputSubmit}>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  64)                     <InputGroup className="mb-3">
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  65)                         <Form.Control
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  66)                         placeholder="Search"
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  67)                         aria-label="Search"
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  68)                         onChange={(event) => tempSearchInput.current = event.target.value}
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  69)                         style={{
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  70)                             minWidth: '150px'
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  71)                         }}
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  72)                         />
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  73)                         <Button type="submit" variant="outline-primary">
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  74)                         Search
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  75)                         </Button>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  76)                         <DropdownButton
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  77)                         variant="outline-secondary"
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  78)                         title={`Sort By: ${sortBy.name}`}
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  79)                         >
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  80)                             {Object.values(sortByOptions).map((sortByOption, i) => (
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  81)                                 <Dropdown.Item  key={i} onClick={() => setSortBy(sortByOption)} active={sortByOption.name === sortBy.name}>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  82)                                     {sortByOption.name}
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  83)                                 </Dropdown.Item>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  84)                             ))}
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  85)                         </DropdownButton>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  86)                     </InputGroup>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  87)                 </Form>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  88)                 <h4>Results ({totalRows}) {useOffcanvasFilters && (
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  89)                     <Button variant="secondary" onClick={showFilters}><FaFilter /> Filters</Button>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  90)                 )}</h4>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  91)                 <div style={{maxHeight: '95%', overflowY: 'auto', paddingBottom: '100px'}} onScroll={onScroll} ref={containerRef}>
79a90afe (LakelonBailey 2023-11-05 18:09:36 -0500  92)                     <ResponsiveMasonry columnsCountBreakPoints={{0: 1, 400: 2, 1000: 3}} style={{maxWidth: '95%'}}>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  93)                         <Masonry columnsCount={3} gutter="10px">
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  94)                             {(fragranceListings.length
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  95)                                 ? fragranceListings.map((f, i) => (
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  96)                                     <FragranceListingCard
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  97)                                     key={i}
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  98)                                     fragranceListing={f}
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  99)                                     handleShowLoginModal={handleShowLoginModal}
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 100)                                     fragranceWatchlistedMapper={fragranceWatchlistedMapper}
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 101)                                     setFragranceWatchlistedMapper={setFragranceWatchlistedMapper}
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 102)                                     />
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 103)                                 ))
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 104)                                 : (<p>No Results</p>)
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 105)                             )}
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 106)                         </Masonry>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 107)                     </ResponsiveMasonry>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 108)                 </div>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 109)             </Col>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 110)             <>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 111)                 <Modal show={showLoginModal} onHide={handleCloseLoginModal}>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 112)                     <Modal.Header closeButton>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 113)                     <Modal.Title>Not Logged In</Modal.Title>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 114)                     </Modal.Header>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 115)                     <Modal.Body>You must be logged in to add items to your watchlist.</Modal.Body>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 116)                     <Modal.Footer>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 117)                     <Button variant="secondary" onClick={handleCloseLoginModal}>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 118)                         Close
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 119)                     </Button>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 120)                     <Button variant="primary" onClick={() => window.location.replace('/login')}>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 121)                         Log In
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 122)                     </Button>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 123)                     <Button variant="primary" onClick={() => window.location.replace('/signup')}>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 124)                         Sign Up
c3741ba0 (LakelonBailey 2023-11-04 02:10:33 -0400 125)                     </Button>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 126)                     </Modal.Footer>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 127)                 </Modal>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 128)             </>
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 129)         </>


./frontend/src/components/FragranceListingCard.js
9adfae36 (LakelonBailey     2023-11-09 10:47:37 -0500  1) import React from "react";
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500  2) import Card from 'react-bootstrap/Card';
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500  3) import Button from "react-bootstrap/Button";
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500  4) import CardLink from 'react-bootstrap/CardLink';
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500  5) import auth from '../utils/auth';
9adfae36 (LakelonBailey     2023-11-09 10:47:37 -0500  6) import { sendPost, sendDelete} from "../utils/requests";
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500  7) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500  8) function FragranceListingCard({
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500  9)     fragranceListing,
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 10)     handleShowLoginModal,
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 11)     fragranceWatchlistedMapper,
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 12)     setFragranceWatchlistedMapper
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 13) }){
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 14)     const fragrance = fragranceListing.fragrance;
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 15)     const isWatchlisted = fragranceWatchlistedMapper[fragrance.id];
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 16) 
9adfae36 (LakelonBailey     2023-11-09 10:47:37 -0500 17)     // Add a fragrance to watchlist and update
9adfae36 (LakelonBailey     2023-11-09 10:47:37 -0500 18)     // its watchlisted state
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 19)     const addToWatchlist = async () => {
9adfae36 (LakelonBailey     2023-11-09 10:47:37 -0500 20) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 22)         const isLoggedIn = await auth.validateToken();
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 23)         if (!isLoggedIn) {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 24)             handleShowLoginModal();
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 25)             return;
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 26)         }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 27) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 28)         const response = await sendPost(`/api/watchlist/${fragrance.id}`);
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 29)         if (response.ok) {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 30)             setFragranceWatchlistedMapper({
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 31)                 ...fragranceWatchlistedMapper,
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 32)                 [fragrance.id]: true
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 33)             });
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 34)         }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 35)     }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 36) 
9adfae36 (LakelonBailey     2023-11-09 10:47:37 -0500 37)     // Remove a fragrance from watchlist and update its watchlisted
9adfae36 (LakelonBailey     2023-11-09 10:47:37 -0500 38)     // state.
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 39)     const removeFromWatchlist = async () => {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 40)         const response = await sendDelete(`/api/watchlist/${fragrance.id}`);
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 41)         if (response.ok) {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 42)             setFragranceWatchlistedMapper({
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 43)                 ...fragranceWatchlistedMapper,
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 44)                 [fragrance.id]: false
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 45)             });
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 46)         }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 47)     }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 48) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 49)     return (
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 50)         <Card className={isWatchlisted ? 'border-info' : ''}>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 51)             <Card.Img  style={{cursor: 'pointer'}} variant="top" src={fragrance.photoLink} onClick={() => window.open(fragranceListing.link, '_blank')} />
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 52)             <Card.Body>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 53)             <Card.Title>{fragrance.title} ({fragranceListing.sizeoz} oz)</Card.Title>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 54)             <div style={{marginLeft: '8px'}}>
79a90afe (LakelonBailey     2023-11-05 18:09:36 -0500 55)                 <Card.Subtitle>{fragrance.brand} ({fragrance.gender}) - {fragrance.concentration}</Card.Subtitle>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 56)                 <Card.Subtitle style={{marginTop: '4px'}}><strong>${fragranceListing.price}</strong></Card.Subtitle>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 57)             </div>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 58)             {isWatchlisted
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 59)             ? (
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 60)                 <Button style={{marginTop: '12px'}} size="sm" variant="danger" onClick={removeFromWatchlist}>Remove from watchlist</Button>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 61)             )
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 62)             : (
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 63)                 <Button style={{marginTop: '12px'}} size="sm" variant="info" onClick={addToWatchlist}>Add to watchlist</Button>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 64)             )
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 65)             }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 66)             <div style={{marginTop: '12px'}}>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 67)                 <CardLink href={fragranceListing.link} target="_blank">See on {fragranceListing.site.replace('www.', '')}</CardLink>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 68)             </div>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 69)             </Card.Body>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 70)         </Card>
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 71)     )
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 72) };
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 73) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 74) export default FragranceListingCard;


./frontend/src/assets/css/auth.css
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  1) .auth-container {
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  2)     background-color: #f8f9fa;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  3)     margin: 0 !important;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  4)     padding: 0 !important;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  5)     width: 100vw;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  6)     height: 100vh;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  7)     overflow: hidden;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  8) }
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400  9) 
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 10) .auth-box {
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 11)     padding: 2rem;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 12)     background: #ffffff;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 13)     border-radius: 15px;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 14)     box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 15)     min-height: fit-content;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 16)     margin-top: 40%;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 17) }
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 18) 
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 19) .auth-box h1 {
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 20)     width: 100%;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 21)     text-align: center;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 22) }
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 23) 
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 24) 
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 25) .signup-form > * {
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 26)     margin: 12px 0;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 27) }


./frontend/src/assets/css/navbar.css
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 1) .navigation {
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 2)   border-bottom: 1px solid lightgray;
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 3)   box-shadow: 0 0 5px rgba(0, 0, 0, .10);
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 4) }


./frontend/src/pages/Home.js
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  1) import React, { useEffect } from 'react';
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  4) import auth from '../utils/auth';
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500  7) 
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500  8)     // Validate token at first page opening
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  9)     const checkLoginStatus = async () => {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 10)         const validToken = await auth.validateToken();
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 11)         if (!validToken) {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 12)             auth.removeToken();
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 13)         }
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 14)     }
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 15) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 16)     useEffect(() => {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 17)         checkLoginStatus();
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 18)     }, []);
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 19) 
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 21)         <div style={{
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 22)             height: '100vh',
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 23)             overflow: 'hidden'
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 24)         }}>
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 26)                 height: '5%',
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 30)                 height: '95%',
dc83f4f0 (LakelonBailey 2023-11-04 23:48:02 -0400 34)         </div>


./frontend/src/pages/Signup.js
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400   4) import { Form, Button, Container, Row, Col, Toast } from 'react-bootstrap';
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400   5) import AuthForm from "../components/AuthForm";
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  17)   const [showToast, setShowToast] = useState(false);
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  18)   const [errorMessage, setErrorMessage] = useState('');
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  39)             setErrorMessage(response.data.message);
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  45)     <AuthForm
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  46)     setShowToast={setShowToast}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  47)     showToast={showToast}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  48)     errorMessage={errorMessage}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  49)     >
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  50)       <h1>Sign Up</h1>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  51)       <Form onSubmit={handleFormSubmit} className="signup-form">
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  52)         <Form.Group>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  53)           <Form.Label>First Name</Form.Label>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  54)           <Form.Control
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  55)             placeholder="Enter first name"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  56)             name="firstName"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  57)             value={formState.firstName}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  58)             onChange={handleFormChange}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  59)           />
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  60)         </Form.Group>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  61)         <Form.Group>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  62)           <Form.Label>Last Name</Form.Label>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  63)           <Form.Control
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  64)             placeholder="Enter last name"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  65)             name="lastName"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  66)             value={formState.lastName}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  67)             onChange={handleFormChange}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  68)           />
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  69)         </Form.Group>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  70)         <Form.Group>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  71)           <Form.Label>Username</Form.Label>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  72)           <Form.Control
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  73)             placeholder="Enter username"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  74)             name="username"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  75)             value={formState.username}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  76)             onChange={handleFormChange}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  77)           />
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  78)         </Form.Group>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  79)         <Form.Group controlId="formBasicEmail">
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  80)           <Form.Label>Email address</Form.Label>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  81)           <Form.Control
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  82)             type="email"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  83)             placeholder="Enter email"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  84)             name="email"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  85)             value={formState.email}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  86)             onChange={handleFormChange}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  87)           />
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  88)         </Form.Group>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  89) 
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  90)         <Form.Group controlId="formBasicPassword">
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  91)           <Form.Label>Password</Form.Label>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  92)           <Form.Control
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  93)             type="password"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  94)             placeholder="Password"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  95)             name="password"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  96)             value={formState.password}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  97)             onChange={handleFormChange}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  98)           />
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  99)         </Form.Group>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 100)         <Button variant="primary" type="submit" className="w-100 mt-3">
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 101)           Submit
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 102)         </Button>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 103)       </Form>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 104)     </AuthForm>


./frontend/src/pages/Login.js
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  4) import { Form, Button, Container, Row, Col, Toast } from 'react-bootstrap';
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  5) import AuthForm from "../components/AuthForm";
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400  6) import '../assets/css/auth.css';
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 15)   const [showToast, setShowToast] = useState(false);
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 16)   const [errorMessage, setErrorMessage] = useState('');
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 36)         setErrorMessage(response.data.message);
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 37)         setShowToast(true);
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 42)     <AuthForm
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 43)     setShowToast={setShowToast}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 44)     showToast={showToast}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 45)     errorMessage={errorMessage}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 46)     >
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 47)       <h1>Login</h1>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 48)       <Form onSubmit={handleFormSubmit}>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 49)       <Form.Group controlId="formBasicEmail">
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 50)         <Form.Label>Email address</Form.Label>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 51)         <Form.Control
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 52)           type="email"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 53)           placeholder="Enter email"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 54)           name="email"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 55)           value={formState.email}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 56)           onChange={handleFormChange}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 57)         />
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 58)       </Form.Group>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 59) 
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 60)       <Form.Group controlId="formBasicPassword">
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 61)         <Form.Label>Password</Form.Label>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 62)         <Form.Control
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 63)           type="password"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 64)           placeholder="Password"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 65)           name="password"
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 66)           value={formState.password}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 67)           onChange={handleFormChange}
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 68)         />
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 69)       </Form.Group>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 70)         <Button variant="primary" type="submit" className="w-100 mt-3">
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 71)           Submit
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 72)         </Button>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 73)       </Form>
dc83f4f0 (LakelonBailey     2023-11-04 23:48:02 -0400 74)     </AuthForm>


./backend/utils/dbUpdater.js
dc34a5c0 (LakelonBailey 2023-11-08 17:07:51 -0500   5) require('dotenv').config();
dc34a5c0 (LakelonBailey 2023-11-08 17:07:51 -0500  13) 		const pythonPath = process.env.PYTHON_PATH || 'python';
dc34a5c0 (LakelonBailey 2023-11-08 17:07:51 -0500  14) 		const pyproc = spawn(pythonPath, ["./scrapers/MasterScript.py", maxItemsPerScraper], {
dc34a5c0 (LakelonBailey 2023-11-08 17:07:51 -0500  80) 
dc34a5c0 (LakelonBailey 2023-11-08 17:07:51 -0500  89)


./backend/utils/auth.js
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500  6) function getTokenFromRequest(req) {
9adfae36 (LakelonBailey     2023-11-09 10:47:37 -0500  7) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500  8)   // Allows token to be sent via req.body, req.query, or headers
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500  9)   let token = req.headers.authorization || req.body?.token || req.query?.token;
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 10) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 11)   if (token) {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 12)     return token.replace('Bearer ', '');
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 13)   }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 14) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 15)   return null;
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 16) }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 17) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 18) function decodeToken(token) {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 19)   try {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 20)     const { data } = jwt.verify(token, secret);
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 21)     return data;
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 22) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 23)   } catch {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 24)     return null;
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 25)   }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 26) }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 27) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 31)     const token = getTokenFromRequest(req);
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 35)     const data = decodeToken(token);
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 36)     if (data) {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 39)     }
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 40)     else {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 45)   attachUserMiddleware: function(req, res, next) {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 46)     const token = getTokenFromRequest(req);
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 47)     req.user = decodeToken(token);
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 48)     next();
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 49)   },
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 50) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 54)     return jwt.sign({ data: payload }, secret);
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 55)   },
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 56) 
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 57)   validateToken: function(req) {
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 58)     const token = getTokenFromRequest(req);
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 59)     return !!decodeToken(token);
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 60)


./backend/utils/parsing.js
33b50530 (LakelonBailey 2023-11-04 01:53:53 -0400  2) const genderMapper = {
33b50530 (LakelonBailey 2023-11-04 01:53:53 -0400  3)     'All': "All",
33b50530 (LakelonBailey 2023-11-04 01:53:53 -0400  4)     'Male': "Men's",
33b50530 (LakelonBailey 2023-11-04 01:53:53 -0400  5)     'Female': "Women's",
33b50530 (LakelonBailey 2023-11-04 01:53:53 -0400  6)     'Unisex': "Unisex",
33b50530 (LakelonBailey 2023-11-04 01:53:53 -0400  7) }
33b50530 (LakelonBailey 2023-11-04 01:53:53 -0400 44)         data.sizeoz = parseFloat(data.sizeoz?.toFixed(2) || 0);
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 51)         data.gender = genderMapper[data.gender] || data.gender;


./backend/models/index.js
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 10)     as: 'watchlist',
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 17)     as: 'watchlist',


./backend/scripts/seedData.js
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  4) const sequelize = require('../config/db');
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 52) sequelize.sync({ force: false, alter: true }).then(() => {
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 53)     loadFragrances();
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 54) });


./backend/actions/fragranceListingActions.js
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500   1) const { FragranceListing, Fragrance, User, UserFragrance} = require('../models');
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500   2) const {Op} = require('sequelize');
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500   3) const sequelize = require('../config/db');
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500   4) const {Sequelize} = require('sequelize');
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500   5) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500   6) const FRAGRANCE_QUERY_LIMIT = 20;
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500   7) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500   8) async function getfragranceListings(req, res) {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500   9)     const {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  10)         priceStart,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  11)         priceEnd,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  12)         sizeStart,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  13)         sizeEnd,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  14)         brands,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  15)         gender,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  16)         searchInput,
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  17)         page
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  18)     } = req.query;
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  19) 
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  20)     const watchlisted = req.query.watchlisted;
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  21) 
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500  22)     // Parse the sortBy field. This involves determining which model (Fragrance or FragranceListing)
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500  23)     // that the field belongs to
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  24)     let sortBy = req.query.sortBy ? req.query.sortBy.split(',') : undefined;
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  25)     if (sortBy) {
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500  26)         const fragranceFields = Object.keys(Fragrance.getAttributes());
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500  27)         if (fragranceFields.includes(sortBy[0])) {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  28)             sortBy.unshift({model: Fragrance})
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  29)         }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  30)         sortBy = [sortBy]
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  31)     }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  32) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  33)     // Initialize model filters
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  34)     const fragranceWhere = {}
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  35)     const fragranceListingWhere = {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  36)         price: {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  37)             [Op.between]: [parseFloat(priceStart), parseFloat(priceEnd)],
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  38)         },
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  39)         sizeoz: {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  40)             [Op.between]: [parseFloat(sizeStart), parseFloat(sizeEnd)],
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  41)         }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  42)     }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  43) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  44)     // Only filter on brands if some are provided
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  45)     const getAllBrands = brands == '';
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  46)     if (!getAllBrands) {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  47)         fragranceWhere.brand = {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  48)             [Op.in]: brands.split(',')
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  49)         }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  50)     }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  51) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  52)     // Only filter on gender if a specific one
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  53)     // is selected
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  54)     if (gender != 'All') {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  55)         fragranceWhere.gender = gender;
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  56)     }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  57) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  58)     // Filter based on searchInput if provided
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  59)     if (searchInput && searchInput.trim() !== '') {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  60)         const searchTerms = searchInput.trim().split(' ');
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  61)         const searchConditions = searchTerms.map(term => ({
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  62)             [Op.or]: [
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  63)                 { brand: { [Op.like]: `%${term}%` } },
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  64)                 { title: { [Op.like]: `%${term}%` } },
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  65)                 { gender: { [Op.like]: `%${term}%` } }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  66)             ]
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  67)         }));
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  68) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  69)         fragranceWhere[Op.and] = searchConditions;
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  70)     }
e7b47576 (LakelonBailey 2023-11-05 17:56:45 -0500  71) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  72)     const fragranceSubquery = {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  73)         model: Fragrance,
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  74)         where: fragranceWhere
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  75)     }
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  76) 
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500  77)     // If there's a valid user, filter on whether or
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500  78)     // not the fragrance is watchlisted
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  79)     if (req.user) {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  80)         fragranceSubquery.include = [{
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  81)             model: User,
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  82)             as: 'watchlist',
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  83)             through: {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  84)                 attributes: []
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  85)             },
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  86)             attributes: ['id'],
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  87)             where: {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  88)                 id: req.user.id
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  89)             },
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  90)             required: watchlisted == 'true'
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  91)         }]
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  92)     }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  93) 
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  94)     // Define a subquery for non-watchlisted items if needed
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  95)     if (watchlisted == 'false' && req.user) {
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  96)          const entries = await UserFragrance.findAll({
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  97)             attributes: ['fragranceId'],
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  98)             where: {
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500  99)                 userId: req.user.id
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 100)             },
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 101)             raw: true
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 102)         });
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 103) 
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 104)         fragranceWhere.id = {
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 105)             [Op.notIn]: entries.map(entry => entry.fragranceId)
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 106)         };
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 107)     }
01ecbb2d (LakelonBailey 2023-11-05 17:51:14 -0500 108) 
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 109)     // Call find and count since we need to know the total rows
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 110)     // even though we're limiting results
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 111)     const fragranceListings = await FragranceListing.findAndCountAll({
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 112)         where: fragranceListingWhere,
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 113)         include: [fragranceSubquery],
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 114)         offset: page * FRAGRANCE_QUERY_LIMIT,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 115)         limit: FRAGRANCE_QUERY_LIMIT,
e7b47576 (LakelonBailey 2023-11-05 17:56:45 -0500 116)         order: sortBy,
e7b47576 (LakelonBailey 2023-11-05 17:56:45 -0500 117)         subQuery: false
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 118)     });
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 119) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 120)     const listingsWithWatchlisted = fragranceListings.rows.map(f => {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 121)         const plainFragrance = f.get({ plain: true });
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 122)         plainFragrance.fragrance.watchlisted = !!f.fragrance.watchlist?.length;
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 123)         return plainFragrance;
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 124)     });
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 125) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 126)     res.json({
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 127)         success: true,
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 128)         data: listingsWithWatchlisted,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 129)         totalCount: fragranceListings.count
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 130)     });
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 131) };
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 132) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 133) async function getSearchDefaults(req, res) {
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 134) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 135)     // Aggregate max price and max size
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 136)     const aggregates = await sequelize.query(`
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 137)         SELECT
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 138)             MAX(price) as maxPrice,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 139)             MAX(sizeoz) as maxSize
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 140)         FROM
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 141)             fragrance_listing
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 142)     `, { type: Sequelize.QueryTypes.SELECT });
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 143) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 144)     // Group listings by brand and count the occurrences for
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 145)     // each brand
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 146)     const brandGrouping = await FragranceListing.findAll({
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 147)         attributes: [
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 148)             [Sequelize.fn('COUNT', Sequelize.col('fragrance_listing.id')), 'listingCount'],
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 149)             [Sequelize.col('fragrance.brand'), 'brand']
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 150)         ],
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 151)         include: [{
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 152)             model: Fragrance,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 153)             attributes: []
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 154)         }],
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 155)         group: ['fragrance.brand'],
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 156)         order: [['listingCount', 'DESC']]
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 157)     })
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 158) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 159)     // Return search defaults
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 160)     res.json({
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 161)         success: true,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 162)         data: {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 163)             ...aggregates[0],
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 164)             brands: brandGrouping.map(b => b.get())
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 165)         }
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 166)     });
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 167) };
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 168) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 169) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 170) module.exports = {
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 171)     getfragranceListings,
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 172)     getSearchDefaults
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 173) };


./backend/actions/index.js
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 1) const fragranceListingActions = require('./fragranceListingActions');
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 2) const watchlistActions = require('./watchlistActions');
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 3) 
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 4) module.exports = {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 5)     fragranceListingActions,
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 6)     watchlistActions
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500 7) }


./backend/actions/watchlistActions.js
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  1) const {UserFragrance} = require('../models');
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  2) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  3) async function addFragranceToWatchlist(req, res) {
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500  4)     const [item, _] = await UserFragrance.findCreateFind({
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  5)         where: {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  6)             fragranceId: req.params.fragranceId,
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  7)             userId: req.user.id
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  8)         }
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  9)     });
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 10) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 11)     res.json({
9adfae36 (LakelonBailey 2023-11-09 10:47:37 -0500 12)         success: !!item
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 13)     });
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 14) }
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 15) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 16) async function removeFragranceFromWatchlist(req, res) {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 17)     await UserFragrance.destroy({
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 18)         where: {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 19)             fragranceId: req.params.fragranceId,
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 20)             userId: req.user.id
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 21)         }
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 22)     });
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 23) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 24)     res.json({
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 25)         success: true
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 26)     });
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 27) }
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 28) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 29) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 30) module.exports = {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 31)     addFragranceToWatchlist,
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 32)     removeFragranceFromWatchlist
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 33) }


./backend/scrapers/MasterScript.py
0217d198 (LakelonBailey 2023-10-27 08:56:03 -0400 12) 
0217d198 (LakelonBailey 2023-10-27 08:56:03 -0400 13) scrapers = [
0217d198 (LakelonBailey 2023-10-27 08:56:03 -0400 14)     scrape_jomashop,
0217d198 (LakelonBailey 2023-10-27 08:56:03 -0400 17) ]
0217d198 (LakelonBailey 2023-10-27 08:56:03 -0400 18) 
0217d198 (LakelonBailey 2023-10-27 08:56:03 -0400 21)         *[scraper(max_items) for scraper in scrapers]
0217d198 (LakelonBailey 2023-10-27 08:56:03 -0400 35) result = asyncio.run(get_data(max_items_per_scraper))
0217d198 (LakelonBailey 2023-10-27 08:56:03 -0400 37) gdf = pd.concat(list(map(
0217d198 (LakelonBailey 2023-10-27 08:56:03 -0400 38)     lambda data: pd.read_json(data, orient='records'),
0217d198 (LakelonBailey 2023-10-27 08:56:03 -0400 39)     result
0217d198 (LakelonBailey 2023-10-27 08:56:03 -0400 40) )))
dc34a5c0 (LakelonBailey 2023-11-08 17:07:51 -0500 42) gdf.to_json('data/AllRecords.json', orient='records')


./backend/routes/fragranceListingRoutes.js
92863883 (LakelonBailey 2023-11-05 13:42:57 -0500  2) const { fragranceListingActions } = require('../actions');
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  3) const {attachUserMiddleware} = require('../utils/auth');
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  5) router.get('/', attachUserMiddleware, async (req, res) => {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  6)     fragranceListingActions.getfragranceListings(req, res);
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 10)     fragranceListingActions.getSearchDefaults(req, res);


./backend/routes/index.js
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500  4) const watchlistRoutes = require('./watchlistRoutes.js');
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 10) router.use('/watchlist', watchlistRoutes);
f22628ea (LakelonBailey     2023-11-05 17:18:17 -0500 17)


./backend/routes/watchlistRoutes.js
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  1) const router = require('express').Router();
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  2) const { watchlistActions } = require('../actions');
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  3) const {authMiddleware} = require('../utils/auth');
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  4) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  5) router.post('/:fragranceId', authMiddleware, async (req, res) => {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  6)     watchlistActions.addFragranceToWatchlist(req, res);
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  7) });
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  8) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500  9) router.delete('/:fragranceId', authMiddleware, async (req, res) => {
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 10)     watchlistActions.removeFragranceFromWatchlist(req, res);
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 11) });
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 12) 
f22628ea (LakelonBailey 2023-11-05 17:18:17 -0500 13) module.exports = router;


./backend/routes/userRoutes.js
f22628ea backend/routes/userRoutes.js  (LakelonBailey     2023-11-05 17:18:17 -0500  3) const { signToken, validateToken } = require('../utils/auth');
f22628ea backend/routes/userRoutes.js  (LakelonBailey     2023-11-05 17:18:17 -0500 30) 
f22628ea backend/routes/userRoutes.js  (LakelonBailey     2023-11-05 17:18:17 -0500 31) router.get('/validate-token', async (req, res) => {
f22628ea backend/routes/userRoutes.js  (LakelonBailey     2023-11-05 17:18:17 -0500 32)     res.json({
f22628ea backend/routes/userRoutes.js  (LakelonBailey     2023-11-05 17:18:17 -0500 33)         success: validateToken(req)
f22628ea backend/routes/userRoutes.js  (LakelonBailey     2023-11-05 17:18:17 -0500 34)     });