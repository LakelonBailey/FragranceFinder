frontend/package.json
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  1) {
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  2)   "name": "fragrance-finder-ui",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  3)   "version": "0.1.0",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  4)   "private": true,
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  5)   "dependencies": {
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  6)     "@testing-library/jest-dom": "^5.17.0",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  7)     "@testing-library/react": "^13.4.0",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  8)     "@testing-library/user-event": "^13.5.0",
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400  9)     "http-proxy-middleware": "^2.0.6",
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 10)     "jwt-decode": "^3.1.2",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 11)     "react": "^18.2.0",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 12)     "react-dom": "^18.2.0",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 14)     "react-scripts": "5.0.1",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 15)     "web-vitals": "^2.1.4"
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 16)   },
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 17)   "scripts": {
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 18)     "start": "react-scripts start",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 19)     "build": "react-scripts build",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 20)     "test": "react-scripts test",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 21)     "eject": "react-scripts eject"
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 22)   },
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 23)   "eslintConfig": {
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 24)     "extends": [
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 25)       "react-app",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 26)       "react-app/jest"
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 27)     ]
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 28)   },
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 29)   "browserslist": {
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 30)     "production": [
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 31)       ">0.2%",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 32)       "not dead",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 33)       "not op_mini all"
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 34)     ],
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 35)     "development": [
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 36)       "last 1 chrome version",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 37)       "last 1 firefox version",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 38)       "last 1 safari version"
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 39)     ]
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 40)   }
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 41) }

frontend/src/reportWebVitals.js
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  1) const reportWebVitals = onPerfEntry => {
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  2)   if (onPerfEntry && onPerfEntry instanceof Function) {
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  3)     import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  4)       getCLS(onPerfEntry);
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  5)       getFID(onPerfEntry);
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  6)       getFCP(onPerfEntry);
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  7)       getLCP(onPerfEntry);
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  8)       getTTFB(onPerfEntry);
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  9)     });
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 10)   }
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 11) };
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 12) 
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 13) export default reportWebVitals;

frontend/src/setupProxy.js
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400  1) const { createProxyMiddleware } = require('http-proxy-middleware');
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400  2) 
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400  3) module.exports = function(app) {
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400  4)   app.use(
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400  5)     '/api',
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400  6)     createProxyMiddleware({
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400  7)       target: 'http://localhost:3001',
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400  8)       changeOrigin: true,
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400  9)     })
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400 10)   );
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400 11) };

frontend/src/App.css
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  1) @keyframes rainbow {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  2)     0% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  3)         color: red;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  4)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  5)     10% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  6)         color: orange;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  7)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  8)     20% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  9)         color: yellow;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 10)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 11)     30% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 12)         color: green;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 13)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 14)     40% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 15)         color: blue;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 16)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 17)     50% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 18)         color: purple;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 19)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 20)     60% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 21)         color: blue;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 22)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 23)     70% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 24)         color: green;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 25)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 26)     80% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 27)         color: yellow;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 28)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 29)     90% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 30)         color: orange
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 31)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 32)     100% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 33)         color: red
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 34)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 35) }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 36) 
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 37) .rainbow {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 38)     animation: 5s rainbow linear infinite;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 39) }

frontend/src/index.js
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  1) import React from 'react';
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  2) import ReactDOM from 'react-dom/client';
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  3) import './index.css';
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  4) import App from './App';
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  5) import reportWebVitals from './reportWebVitals';
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  6) 
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  7) const root = ReactDOM.createRoot(document.getElementById('root'));
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  8) root.render(
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  9)   <React.StrictMode>
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 10)     <App />
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 11)   </React.StrictMode>
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 12) );
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 13) 
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 14) // If you want to start measuring performance in your app, pass a function
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 15) // to log results (for example: reportWebVitals(console.log))
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 16) // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 17) reportWebVitals();

frontend/src/index.css
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  1) body {
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  2)   margin: 0;
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  3)   font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  4)     'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  5)     sans-serif;
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  6)   -webkit-font-smoothing: antialiased;
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  7)   -moz-osx-font-smoothing: grayscale;
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  8) }
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  9) 
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 10) code {
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 11)   font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 12)     monospace;
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 13) }

frontend/src/App.test.js
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 1) import { render, screen } from '@testing-library/react';
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 2) import App from './App';
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 3) 
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 4) test('renders learn react link', () => {
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 5)   render(<App />);
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 6)   const linkElement = screen.getByText(/learn react/i);
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 7)   expect(linkElement).toBeInTheDocument();
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 8) });

frontend/src/setupTests.js
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 1) // jest-dom adds custom jest matchers for asserting on DOM nodes.
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 2) // allows you to do things like:
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 3) // expect(element).toHaveTextContent(/react/i)
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 4) // learn more: https://github.com/testing-library/jest-dom
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 5) import '@testing-library/jest-dom';

frontend/src/logo.svg
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 1) <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

frontend/src/App.js
17ccb666 (OutliersAdvantage 2023-09-20 13:49:11 -0400  2) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  4) import Login from './pages/Login';
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  5) import Signup from './pages/Signup';
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 10) import "./App.css";
17ccb666 (OutliersAdvantage 2023-09-20 13:49:11 -0400 11) 
9b64e8c8 (OutliersAdvantage 2023-09-21 11:23:01 -0400 13) 
9b64e8c8 (OutliersAdvantage 2023-09-21 11:23:01 -0400 17) 				<Route exact path='/' element={<Home />} />
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 18) 				<Route path='/login' element={<Login />} />
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 19) 				<Route path='/signup' element={<Signup />} />
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 27) }
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 28) 
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 29) export default App;

frontend/src/utils/auth.js
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  1) import decode from 'jwt-decode';
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  2) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  3) class AuthService {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  4) 
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  5)     // Return user information found in the token
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  6)     getProfile() {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  7)         return decode(this.getToken());
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  8)     }
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  9) 
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 10)     // If token exists and is not expired, user is logged in
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 11)     loggedIn() {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 12)         const token = this.getToken();
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 13)         return !!token && !this.isTokenExpired(token);
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 14)     }
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 15) 
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 16)     // Check if token is expired against its
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 17)     // timestamp found in 'exp'
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 18)     isTokenExpired(token) {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 19)         try {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 20)         const decoded = decode(token);
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 21)         if (decoded.exp < Date.now() / 1000) {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 22)             return true;
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 23)         } else return false;
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 24)         } catch (err) {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 25)         return false;
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 26)         }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 27)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 28) 
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 29)     getToken() {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 30)         return localStorage.getItem('id_token');
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 31)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 32) 
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 33)     // "log in" the user by setting token in local storage
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 34)     // and redirecting to home page
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 35)     login(idToken) {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 36)         localStorage.setItem('id_token', idToken);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 37) 
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 38)         window.location.assign('/');
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 39)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 40) 
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 41)     // "log out" the user by removing local storage token
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 42)     // and redirecting to home page
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 43)     logout() {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 44)         localStorage.removeItem('id_token');
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 45)         window.location.assign('/');
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 46)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 47) }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 48) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 49) const instance = new AuthService();
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 50) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 51) export default instance;

frontend/src/utils/requests.js
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  1) import AuthService from '../utils/auth';
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  2) 
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  3) 
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  4) const getDefaultHeaders = () => {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  5)     const token = AuthService.getToken();
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  6)     return {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  7)         'Accept': 'application/json',
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  8)         "Authorization": token ? `Bearer ${token}` : '',
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400  9)     }
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 10) }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 11) 
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 12) 
53690dff (OutliersAdvantage 2023-10-01 21:50:41 -0400 13) const setData = async res => {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 14)     const contentType = res.headers.get("content-type");
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 15)     if (contentType && contentType.includes('application/json')) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 16)         const data = await res.json()
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 17)         res.data = data;
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 18)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 19)     return res;
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 20) }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 21) 
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 22) // Default method to send a GET request
8dd1f3e6 (OutliersAdvantage 2023-10-01 22:13:02 -0400 23) export const sendGet = async (url) => {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 24)     const res = await fetch(url, {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 25)         method: 'GET',
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 26)         headers: {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 27)             ...getDefaultHeaders()
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 28)         },
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 29)     });
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 30) 
53690dff (OutliersAdvantage 2023-10-01 21:50:41 -0400 31)     return await setData(res);
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 32) }
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 33) 
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 34) // Default method to send a GET request
8dd1f3e6 (OutliersAdvantage 2023-10-01 22:13:02 -0400 35) export const sendPost = async (url, data) => {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 36)     const res = await fetch(url, {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 37)       method: 'POST',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 38)       body: JSON.stringify(data),
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 39)       headers: {
47165732 (OutliersAdvantage 2023-10-01 21:43:42 -0400 40)         ...getDefaultHeaders(),
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 41)         'Content-Type': 'application/json',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 42)       }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 43)     })
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 44) 
53690dff (OutliersAdvantage 2023-10-01 21:50:41 -0400 45)     return await setData(res);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 46) }

frontend/src/pages/index.js
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  1) import React, { useEffect, useState } from 'react';
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  2) import auth from '../utils/auth';
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  3) import { sendGet } from '../utils/requests';
9b64e8c8 (OutliersAdvantage 2023-09-21 11:23:01 -0400  4) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  6)     const [user, setUser] = useState(null);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  7)     const getMyUser = async function() {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  8)         const response = await sendGet('/api/users/me');
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  9)         if (response.ok) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 10)             setUser(response.data);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 11)         }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 12)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 13)     useEffect(function() {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 14)         getMyUser();
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 15)     }, []);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 16) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 20) 			<p>Login Status: {auth.loggedIn() ? 'Logged In!' : 'Not Logged in :('}</p>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 21) 			<p>Authentication-protected endpoints working: {user ? 'Yes': 'No'}</p>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 22) 			{!auth.loggedIn() && (
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 23)                 <div>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 24)                     <a href="/login">Login</a>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 25)                     <br />
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 26)                     <a href="/signup">Sign Up</a>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 27)                 </div>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 28)             )}
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 29) 			{auth.loggedIn() && (
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 30)                 <div>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 31)                     <button onClick={() => auth.logout()}>Log Out</button>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 32)                 </div>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 33)             )}
9b64e8c8 (OutliersAdvantage 2023-09-21 11:23:01 -0400 37)

frontend/src/pages/Signup.js
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  1) import {useState} from "react";
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  2) import auth from '../utils/auth';
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  3) import { sendPost } from "../utils/requests";
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  4) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  5) function Signup() {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  6)   // Initialize empty form
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  7)   const [formState, setFormState] = useState({
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  8)     email: '',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  9)     password: '',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 10)     username: '',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 11)   });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 12) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 13)   const [error, setError] = useState(null);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 14) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 15)   // Handle changing values in form
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 16)   const handleFormChange = (event) => {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 17)     setFormState({
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 18)       ...formState,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 19)       [event.target.name]: event.target.value
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 20)     });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 21)   }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 22) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 23)   // Handle submission of form
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 24)   const handleFormSubmit = async (event) => {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 25)     event.preventDefault();
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 26) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 27)     const response = await sendPost('/api/users/', formState);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 28)     if (response.ok) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 29)         const { token } = response.data;
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 30)         auth.login(token);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 31)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 32)     else {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 33)         if (response.data.message) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 34)             setError(response.data.message);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 35)         }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 36)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 37)   }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 38) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 39) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 40)   return (
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 41)     <div className="App">
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 42)       <div style={{
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 43)         display: 'flex',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 44)         flexDirection: 'column',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 45)         alignItems: 'center',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 46)       }}>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 47)         <h2>Signup</h2>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 48)         <form onSubmit={handleFormSubmit} style={{
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 49)           display: 'flex',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 50)           flexDirection: 'column',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 51)           width: '500px',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 52)         }}>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 53)             <input name="username" value={formState.username} placeholder="Username" required onChange={handleFormChange}></input>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 54)             <input name="email" value={formState.email} placeholder="Email" required onChange={handleFormChange}></input>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 55)             <input name="password" value={formState.password} placeholder="Password" required onChange={handleFormChange}></input>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 56)             <button type="submit">Submit</button>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 57)             {error && (
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 58)                 <div style={{color: 'red'}}>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 59)                     <p>{error}</p>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 60)                 </div>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 61)             )}
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 62)         </form>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 63)       </div>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 64)     </div>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 65)   );
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 66) }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 67) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 68) export default Signup;

frontend/src/pages/Login.js
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  1) import {useState} from "react";
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  2) import auth from '../utils/auth';
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  3) import { sendPost } from "../utils/requests";
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  4) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  5) function Login() {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  6)   // Initialize empty form
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  7)   const [formState, setFormState] = useState({
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  8)     email: '',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  9)     password: '',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 10)   });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 11) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 12)   const [error, setError] = useState('');
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 13) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 14)   // Handle changing values in form
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 15)   const handleFormChange = (event) => {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 16)     setFormState({
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 17)       ...formState,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 18)       [event.target.name]: event.target.value
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 19)     });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 20)   }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 21) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 22)   // Handle submission of form
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 23)   const handleFormSubmit = async (event) => {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 24)     event.preventDefault();
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 25) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 26)     const response = await sendPost('/api/users/login/', formState);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 27)     if (response.ok) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 28)         const { token } = response.data;
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 29)         auth.login(token);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 30)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 31)     else if (response.data && response.data.message) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 32)         setError(response.data.message);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 33)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 34)   }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 35) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 36) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 37)   return (
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 38)     <div className="App">
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 39)       <div style={{
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 40)         display: 'flex',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 41)         flexDirection: 'column',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 42)         alignItems: 'center',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 43)       }}>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 44)         <h2>Login</h2>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 45)         <form onSubmit={handleFormSubmit} style={{
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 46)           display: 'flex',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 47)           flexDirection: 'column',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 48)           width: '500px',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 49)         }}>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 50)             <input name="email" value={formState.email} placeholder="Email" required onChange={handleFormChange}></input>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 51)             <input name="password" value={formState.password} placeholder="Password" required onChange={handleFormChange}></input>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 52)             <button type="submit">Submit</button>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 53)             {error && (
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 54)                 <div style={{color: 'red'}}>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 55)                     <p>{error}</p>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 56)                 </div>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 57)             )}
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 58)         </form>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 59)       </div>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 60)     </div>
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 61)   );
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 62) }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 63) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 64) export default Login;

frontend/src/pages/CSS/crudexample.css
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  1) @keyframes rainbow {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  2)     0% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  3)         color: red;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  4)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  5)     10% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  6)         color: orange;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  7)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  8)     20% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  9)         color: yellow;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 10)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 11)     30% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 12)         color: green;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 13)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 14)     40% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 15)         color: blue;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 16)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 17)     50% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 18)         color: purple;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 19)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 20)     60% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 21)         color: blue;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 22)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 23)     70% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 24)         color: green;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 25)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 26)     80% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 27)         color: yellow;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 28)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 29)     90% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 30)         color: orange
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 31)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 32)     100% {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 33)         color: red
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 34)     }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 35) }
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 36) 
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 37) .rainbow {
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 38)     animation: 5s rainbow linear infinite;
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400 39) }

frontend/src/pages/demos/CrudExample.js
9b64e8c8 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-21 11:23:01 -0400   4) function CrudExample() {
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400   9)     id: null,
9b64e8c8 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-21 11:23:01 -0400  37)   const handleFormSubmit = async (event) => {
9b64e8c8 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-21 11:23:01 -0400  38)     event.preventDefault();
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  40)     // If there is an id, we're doing an update instead of a creation
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  41)     if (formState.id) {
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  42)       const response = await fetch(`/api/posts/${formState.id}`, {
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  43)         method: 'PUT',
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  44)         body: JSON.stringify(formState),
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  45)         headers: {
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  46)           "Content-Type": "application/json"
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  47)         }
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  48)       });
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  49) 
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  50)       if (response.ok) {
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  51)         setFormState({
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  52)           id: null,
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  53)           title: '',
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  54)           description: ''
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  55)         });
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  56) 
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  57)         getPosts();
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  59)     }
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  60) 
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  61)     // Creation
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  62)     else {
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  63)        // Send form state to backend
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  64)       const response = await fetch('/api/posts/', {
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  65)         method: 'POST',
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  66)         body: JSON.stringify(formState),
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  67)         headers: {
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  68)           "Content-Type": "application/json"
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  69)         }
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  70)       });
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  71) 
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  72)       // If successful, reload posts
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  73)       if (response.ok) {
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  74)         getPosts();
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  75)       }
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  76)     }
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  77)   }
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  78) 
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  79) 
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  80)   const handlePostDelete = async event => {
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  81)     const postId = event.target.value;
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  82)     const response = await fetch(`/api/posts/${postId}`, {
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  83)       method: 'DELETE',
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  91)   const renderUpdate = async ({id, title, description}) => {
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  92)     setFormState({
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  93)       id: id,
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  94)       title: title,
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  95)       description: description
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  96)     });
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  97)   }
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400  98) 
73254be3 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-21 11:39:39 -0400 108)         <div className='rainbow' style={{
73254be3 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-21 11:39:39 -0400 109)           margin: '20px',
73254be3 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-21 11:39:39 -0400 110)           fontSize: '25px',
73254be3 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-21 11:39:39 -0400 111)           fontStyle: 'italic',
73254be3 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-21 11:39:39 -0400 112)           fontWeight: 'bold'
73254be3 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-21 11:39:39 -0400 113)         }}>Lakelon Bailey Hello Plus Example:</div>
9b64e8c8 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-21 11:23:01 -0400 115)         <form onSubmit={handleFormSubmit} style={{
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400 122)           <button type='submit' style={{marginTop: '10px'}}>{formState.id ? 'Update' : 'Submit'}</button>
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400 131)               <span>
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400 132)                 <button onClick={handlePostDelete} value={item.id}>Delete</button>
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400 133)                 <button onClick={() => renderUpdate(item)}>Update</button>
bea87e08 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-22 15:02:19 -0400 134)               </span>
9b64e8c8 frontend/src/pages/CrudExample.js       (OutliersAdvantage 2023-09-21 11:23:01 -0400 143) export default CrudExample;

frontend/src/pages/demos/email.js
8dd1f3e6 frontend/src/pages/demos/email.js (OutliersAdvantage 2023-10-01 22:13:02 -0400  5) import { sendPost } from "../../utils/requests";
8dd1f3e6 frontend/src/pages/demos/email.js (OutliersAdvantage 2023-10-01 22:13:02 -0400 13) 
8dd1f3e6 frontend/src/pages/demos/email.js (OutliersAdvantage 2023-10-01 22:13:02 -0400 20) 
8dd1f3e6 frontend/src/pages/demos/email.js (OutliersAdvantage 2023-10-01 22:13:02 -0400 23) 		await sendPost("/api/email/", form);
8dd1f3e6 frontend/src/pages/demos/email.js (OutliersAdvantage 2023-10-01 22:13:02 -0400 25) 
8dd1f3e6 frontend/src/pages/demos/email.js (OutliersAdvantage 2023-10-01 22:13:02 -0400 38)backend/requirements.txt
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 1) beautifulsoup4==4.12.2
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 2) greenlet==2.0.2
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 3) playwright==1.38.0
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 4) pyee==9.0.4
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 5) soupsieve==2.5
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 6) typing-extensions==4.8.0

backend/server.js
8facaea9 (OutliersAdvantage 2023-09-20 13:15:49 -0400   1) // Load environment variables
8facaea9 (OutliersAdvantage 2023-09-20 13:15:49 -0400   2) require('dotenv').config();
8facaea9 (OutliersAdvantage 2023-09-20 13:15:49 -0400   3) 
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400   4) const path = require('path');
eff43a9e (OutliersAdvantage 2023-09-20 11:57:10 -0400   5) const express = require('express');
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400   6) const PORT = process.env.PORT || 3001;
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400   7) const app = express();
8dd1f3e6 (OutliersAdvantage 2023-10-01 22:13:02 -0400   8) const sequelize = require("./config/db");
8dd1f3e6 (OutliersAdvantage 2023-10-01 22:13:02 -0400  12) app.use(express.json());
8dd1f3e6 (OutliersAdvantage 2023-10-01 22:13:02 -0400  13) 
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400  14) // Direct all routes starting with api to the API's routes
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  15) app.use('/api', require('./routes'));
bea87e08 (OutliersAdvantage 2023-09-22 15:02:19 -0400  16) 
bea87e08 (OutliersAdvantage 2023-09-22 15:02:19 -0400  17) // All other GET requests not handled before will return to our React app for frontend routing
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400  18) app.use(express.static(path.resolve(__dirname, '../frontend/build')));
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400  19) app.get('*', (req, res) => {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  20)     res.sendFile(path.resolve(__dirname, '../frontend/build', 'index.html'));
eff43a9e (OutliersAdvantage 2023-09-20 11:57:10 -0400  21) });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  22) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  23) sequelize.sync({ force: false }).then(() => {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  24) 	app.listen(PORT, () => console.log('Now listening'));
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400  25) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400  26) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400  29) 
d8e62e0a (OutliersAdvantage 2023-10-10 22:00:51 -0400  31) 		const pyproc = spawn("venv/bin/python", ["scrapers/scraperfaker.py"]);
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400  36) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400  44) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400  59) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400  63) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 106) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 109) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 116) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 126) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 131) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 135) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 138) 
70b119c7 (OutliersAdvantage 2023-10-10 21:49:54 -0400 141)

backend/package.json
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  1) {
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  2)   "name": "fragrance-finder-api",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  3)   "version": "1.0.0",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  4)   "description": "Fragrance Finder API",
73254be3 (OutliersAdvantage 2023-09-21 11:39:39 -0400  5)   "main": "server.js",
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400  6)   "scripts": {
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400  7)     "test": "echo \"Error: no test specified\" && exit 1",
e7e943c3 (OutliersAdvantage 2023-09-22 15:04:53 -0400  8)     "start": "nodemon server.js",
eff43a9e (OutliersAdvantage 2023-09-20 11:57:10 -0400  9)     "load-db-local": "mysql -u root -p < schema/schema.sql"
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 10)   },
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 11)   "author": "",
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400 12)   "license": "ISC",
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400 13)   "dependencies": {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 14)     "bcrypt": "^5.1.1",
8facaea9 (OutliersAdvantage 2023-09-20 13:15:49 -0400 15)     "dotenv": "^16.3.1",
eff43a9e (OutliersAdvantage 2023-09-20 11:57:10 -0400 16)     "express": "^4.18.2",
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 17)     "jsonwebtoken": "^9.0.2",
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 19)     "nodemailer": "^6.9.5",
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 20)     "sequelize": "^6.33.0"
bea87e08 (OutliersAdvantage 2023-09-22 15:02:19 -0400 21)   },
bea87e08 (OutliersAdvantage 2023-09-22 15:02:19 -0400 22)   "devDependencies": {
bea87e08 (OutliersAdvantage 2023-09-22 15:02:19 -0400 23)     "nodemon": "^3.0.1"
74885353 (OutliersAdvantage 2023-09-18 09:16:23 -0400 24)   }
^d09ab64 (OutliersAdvantage 2023-09-18 08:41:11 -0400 25) }

backend/config/db.js
0a43b2b3 backend/config/connection.js (OutliersAdvantage 2023-10-01 21:24:55 -0400  1) const Sequelize = require('sequelize');
b66d0afe backend/config/connection.js (OutliersAdvantage 2023-09-22 15:21:26 -0400  2) 
0a43b2b3 backend/config/connection.js (OutliersAdvantage 2023-10-01 21:24:55 -0400  3) require('dotenv').config();
b66d0afe backend/config/connection.js (OutliersAdvantage 2023-09-22 15:21:26 -0400  4) 
0a43b2b3 backend/config/connection.js (OutliersAdvantage 2023-10-01 21:24:55 -0400  5) // create connection to our db
0a43b2b3 backend/config/connection.js (OutliersAdvantage 2023-10-01 21:24:55 -0400  6) const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASSWORD, {
70b119c7 backend/config/db.js         (OutliersAdvantage 2023-10-10 21:49:54 -0400  7)     host: process.env.DB_HOST,
0a43b2b3 backend/config/connection.js (OutliersAdvantage 2023-10-01 21:24:55 -0400  8)     dialect: 'mysql',
70b119c7 backend/config/db.js         (OutliersAdvantage 2023-10-10 21:49:54 -0400  9)     port: process.env.DB_PORT
b66d0afe backend/config/connection.js (OutliersAdvantage 2023-09-22 15:21:26 -0400 10) });
b66d0afe backend/config/connection.js (OutliersAdvantage 2023-09-22 15:21:26 -0400 11) 
0a43b2b3 backend/config/connection.js (OutliersAdvantage 2023-10-01 21:24:55 -0400 12) module.exports = sequelize;

backend/utils/auth.js
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  1) const jwt = require('jsonwebtoken');
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  2) require('dotenv').config();
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  3) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  4) const secret = process.env.JWT_SECRET;
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  5) const expiration = '2h';
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  6) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  7) module.exports = {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  8)   authMiddleware: function(req, res, next) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  9) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 10)     // Allows token to be sent via req.body, req.query, or headers
8dd1f3e6 (OutliersAdvantage 2023-10-01 22:13:02 -0400 11)     let token = req.headers.authorization || req.body?.token || req.query?.token;
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 12) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 13)     if (token) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 14)       token = token.replace('Bearer ', '');
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 15)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 16) 
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 17)     // Try to decode the token. If it throws an error, that means
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 18)     // token is invalid, in which case we return a 401 (Unauthorized)
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 19)     try {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 20)       const { data } = jwt.verify(token, secret, { maxAge: expiration });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 21)       req.user = data;
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 22)       next();
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 23)     } catch {
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 24)       res.status(401).send('Bad Token');
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 25)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 26)   },
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 27) 
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 28)   // Create a JWT with the user information
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 29)   signToken: function({ username, email, id }) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 30)     const payload = { username, email, id };
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 31)     return jwt.sign({ data: payload }, secret, { expiresIn: expiration });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 32)   }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 33) };

backend/models/Fragrance.js
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  1) const { Model, DataTypes } = require('sequelize');
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  2) const sequelize = require('../config/db');
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  3) 
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  4) // create our User model
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  5) class Fragrance extends Model {}
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  6) 
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  7) // Create fields/columns for User model
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  8) Fragrance.init(
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  9)   {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 10)     id: {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 11)       type: DataTypes.INTEGER,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 12)       allowNull: false,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 13)       primaryKey: true,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 14)       autoIncrement: true
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 15)     },
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 16)     make: {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 17)       type: DataTypes.STRING,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 18)     },
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 19)     model: {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 20)       type: DataTypes.STRING,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 21)       allowNull: false
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 22)     },
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 23)     series: {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 24)       type: DataTypes.STRING
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 25)     },
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 26)     photoLink: {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 27)       type: DataTypes.STRING
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 28)     },
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 29)   },
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 30)   {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 31)     hooks: {},
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 32)     sequelize,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 33)     timestamps: true,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 34)     freezeTableName: true,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 35)     underscored: true,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 36)     modelName: 'fragrance'
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 37)   }
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 38) );
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 39) 
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 40) module.exports = Fragrance;

backend/models/User.js
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  1) const { Model, DataTypes } = require('sequelize');
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  2) const bcrypt = require('bcrypt');
8dd1f3e6 (OutliersAdvantage 2023-10-01 22:13:02 -0400  3) const sequelize = require('../config/db');
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  4) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  5) // create our User model
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  6) class User extends Model {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  7)   checkPassword(loginPw) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  8)     return bcrypt.compareSync(loginPw, this.password);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  9)   }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 10) }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 11) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 12) // Create fields/columns for User model
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 13) User.init(
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 14)   {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 15)     id: {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 16)       type: DataTypes.INTEGER,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 17)       allowNull: false,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 18)       primaryKey: true,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 19)       autoIncrement: true
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 20)     },
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 21)     username: {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 22)       type: DataTypes.STRING,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 23)       allowNull: false
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 24)     },
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 25)     email: {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 26)       type: DataTypes.STRING,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 27)       allowNull: false,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 28)       unique: true,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 29)       validate: {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 30)         isEmail: true
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 31)       }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 32)     },
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 33)     password: {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 34)       type: DataTypes.STRING,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 35)       allowNull: false,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 36)       validate: {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 37)         len: [4]
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 38)       }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 39)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 40)   },
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 41)   {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 42)     hooks: {
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 43) 
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 44)       // Encrypt password before creating or updating user.
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 45)       async beforeCreate(newUserData) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 46)         newUserData.password = await bcrypt.hash(newUserData.password, 10);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 47)         return newUserData;
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 48)       },
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 49) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 50)       async beforeUpdate(updatedUserData) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 51)         updatedUserData.password = await bcrypt.hash(updatedUserData.password, 10);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 52)         return updatedUserData;
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 53)       }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 54)     },
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 55)     sequelize,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 56)     timestamps: true,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 57)     freezeTableName: true,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 58)     underscored: true,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 59)     modelName: 'user'
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 60)   }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 61) );
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 62) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 63) module.exports = User;

backend/models/index.js
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  1) // import the models
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  2) const User = require('./User');
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400  3) const Fragrance = require('./Fragrance');
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400  4) const FragranceListing = require('./FragranceListing');
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400  5) const UserFragrance = require('./UserFragrance');
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400  6) 
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400  7) // create associations
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400  8) User.belongsToMany(Fragrance, {
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400  9)     through: UserFragrance,
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 10)     as: 'watchlisted_fragrances',
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 11)     foreignKey: 'user_id',
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 12)     onDelete: 'SET NULL'
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 13) });
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 14) 
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 15) Fragrance.belongsToMany(User, {
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 16)     through: UserFragrance,
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 17)     as: 'watchlisted_fragrances',
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 18)     foreignKey: 'fragrance_id',
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 19)     onDelete: 'SET NULL'
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 20) });
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 21) 
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 22) FragranceListing.belongsTo(Fragrance, {
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 23)     foreignKey: 'fragranceId',
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 24)     onDelete: 'SET NULL'
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 25) });
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 26) 
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 27) 
809d3a48 (OutliersAdvantage 2023-10-05 13:56:04 -0400 28) module.exports = { User, Fragrance, FragranceListing, UserFragrance };

backend/models/UserFragrance.js
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  1) const { Model, DataTypes } = require('sequelize');
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  2) const sequelize = require('../config/db');
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  3) 
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  4) // create our User model
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  5) class UserFragrance extends Model {}
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  6) 
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  7) // Create fields/columns for User model
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  8) UserFragrance.init(
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  9)   {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 10)     id: {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 11)       type: DataTypes.INTEGER,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 12)       allowNull: false,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 13)       primaryKey: true,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 14)       autoIncrement: true
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 15)     },
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 16)     userId: {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 17)       type: DataTypes.INTEGER,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 18)       references: {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 19)         model: 'user',
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 20)         key: 'id'
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 21)       }
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 22)     },
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 23)     fragranceId: {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 24)       type: DataTypes.INTEGER,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 25)       references: {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 26)         model: 'fragrance',
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 27)         key: 'id'
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 28)       }
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 29)     },
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 30)   },
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 31)   {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 32)     hooks: {},
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 33)     sequelize,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 34)     timestamps: true,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 35)     freezeTableName: true,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 36)     underscored: true,
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 37)     modelName: 'user_fragrance'
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 38)   }
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 39) );
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 40) 
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 41) module.exports = UserFragrance;

backend/models/FragranceListing.js
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400  1) const { Model, DataTypes } = require('sequelize');
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400  2) const sequelize = require('../config/db');
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400  3) 
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400  4) // create our User model
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400  5) class FragranceListing extends Model {}
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400  6) 
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400  7) // Create fields/columns for User model
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400  8) FragranceListing.init(
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400  9)   {
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 10)     id: {
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 11)       type: DataTypes.INTEGER,
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 12)       allowNull: false,
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 13)       primaryKey: true,
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 14)       autoIncrement: true
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 15)     },
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 16)     fragranceId: {
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 17)       type: DataTypes.INTEGER,
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 18)       references: {
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 19)         model: 'fragrance',
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 20)         key: 'id'
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 21)       }
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 22)     },
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 23)     price: {
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 24)       type: DataTypes.FLOAT,
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 25)       allowNull: false
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 26)     },
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 27)     discount: {
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 28)       type: DataTypes.INTEGER
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 29)     },
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 30)     quantity: {
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 31)       type: DataTypes.INTEGER
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 32)     },
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 33)     volume: {
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 34)       type: DataTypes.FLOAT
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 35)     },
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 36)     reviews: {
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 37)       type: DataTypes.FLOAT
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 38)     },
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 39)     site: {
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 40)       type: DataTypes.STRING
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 41)     }
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 42)   },
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 43)   {
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 44)     hooks: {},
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 45)     sequelize,
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 46)     timestamps: true,
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 47)     freezeTableName: true,
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 48)     underscored: true,
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 49)     modelName: 'fragrance_listing'
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 50)   }
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 51) );
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 52) 
fc1e18ae backend/models/FragraceListing.js (OutliersAdvantage 2023-10-05 13:51:01 -0400 53) module.exports = FragranceListing;

backend/routes/user-routes.js
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  1) const router = require('express').Router();
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  2) const { User } = require('../models');
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  3) const { signToken, authMiddleware } = require('../utils/auth');
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  4) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  5) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  6) router.post('/', async (req, res) => {
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400  7) 
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400  8)     // Try to create user. Return token if successful
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  9)     try {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 10)         const newUser = await User.create({
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 11)             username: req.body.username,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 12)             email: req.body.email,
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 13)             password: req.body.password
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 14)         });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 15) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 16)         res.json({
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 17)             token: signToken(newUser)
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 18)         });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 19)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 20)     catch (err) {
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 22)             res.status(400).json({
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 23)                 message: "An account already exists with that email!"
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 24)             });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 25)             return;
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 26)         }
abf4187a (OutliersAdvantage 2023-10-05 13:52:05 -0400 27)         console.log(err);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 28)         res.status(500).json({
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 29)             message: "An error occurred. Please try again."
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 30)         });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 31)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 32) });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 33) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 34) router.get('/me', authMiddleware, async (req, res) => {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 35)     res.json(req.user);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 36) })
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 37) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 38) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 39) router.post('/login', async (req, res) => {
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 40) 
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 41)     // Find user
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 42)     const user = await User.findOne({
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 43)         where: {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 44)             email: req.body.email
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 45)         }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 46)     });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 47) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 48)     if (!user) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 49)         res.status(404).json({
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 50)             message: 'No user with that email address!',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 51)             type: 'is-danger'
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 52)         });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 53)         return;
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 54)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 55) 
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 56)     // If password is correct, create token and return to user
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 57)     const validPassword = user.checkPassword(req.body.password);
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 58)     if (!validPassword) {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 59)       res.status(400).json({
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 60)         message: 'Incorrect password!',
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 61)         type: 'is-danger'
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 62)       });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 63)       return;
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 64)     }
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 65) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 66)     res.json({
4001565e (OutliersAdvantage 2023-10-01 21:32:49 -0400 67)         token: signToken(user)
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 68)     });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 69) });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 70) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 71) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 72) module.exports = router;

backend/routes/mailRoutes.js
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  3) const {authMiddleware} = require('../utils/auth');
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  5) router.post("/", authMiddleware, (req, res) => {
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400  8) 	if (!email || !title || !body){
fc1e18ae (OutliersAdvantage 2023-10-05 13:51:01 -0400 11) 	else {

backend/routes/index.js
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  1) const userRoutes = require('./user-routes.js');
da5a88a0 (OutliersAdvantage 2023-09-22 15:24:22 -0400  3) const router = require('express').Router();
da5a88a0 (OutliersAdvantage 2023-09-22 15:24:22 -0400  4) 
da5a88a0 (OutliersAdvantage 2023-09-22 15:24:22 -0400  5) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  6) router.use('/users', userRoutes);
8dd1f3e6 (OutliersAdvantage 2023-10-01 22:13:02 -0400  7) router.use('/email', mailRoutes);
da5a88a0 (OutliersAdvantage 2023-09-22 15:24:22 -0400  8) 
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400  9) // This middleware handles any request that starts with /api and is not handled above
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 10) router.use('*', (req, res) => {
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 11)     res.status(404).json({ error: 'API route not found' });
0a43b2b3 (OutliersAdvantage 2023-10-01 21:24:55 -0400 12) });
da5a88a0 (OutliersAdvantage 2023-09-22 15:24:22 -0400 13) module.exports = router;

backend/routes/basicCrudRoutes.js
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400  1) const router = require('express').Router();
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400  3) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400  4) // Author: Lakelon Bailey
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400  5) // CRUD Example endpoints: Provide ability to Create, Retrieve, Update, and Delete posts.
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400  6) router.post("/api/posts/", (req, res) => {
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400  7) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400  8)   // Get expected values from request body
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400  9)   const { title, description } = req.body;
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 10) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 11)     // Check if title and description are provided
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 12)     if (!title || !description) {
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 13)         return res.status(400).json({ error: "Both title and description are required." });
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 14)     }
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 15) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 16)     // Construct the SQL query
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 17)     const sql = "INSERT INTO posts (title, description) VALUES (?, ?)";
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 18) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 19)     // Execute the query
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 20)     db.query(sql, [title, description], (err, result) => {
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 21)         if (err) {
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 22)             console.error(err);
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 23)             return res.status(500).json({ error: "Database error occurred." });
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 24)         }
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 25) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 26)         // Send a response back indicating success
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 27)         res.json({ message: "Post created successfully.", postId: result.insertId });
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 28)     });
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 29) });
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 30) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 31) router.delete("/api/posts/:postId", (req, res) => {
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 32)     const sql = `
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 33)         DELETE FROM posts WHERE id = ${req.params.postId};
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 34)     `;
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 35) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 36)     // Execute the query
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 37)     db.query(sql, (err, result) => {
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 38)         if (err) {
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 39)             console.error(err);
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 40)             return res.status(500).json({ error: "Database error occurred." });
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 41)         }
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 42) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 43)         // Send a response back indicating success
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 44)         res.json({ message: "Post deleted successfully."});
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 45)     });
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 46) });
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 47) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 48) router.put("/api/posts/:postId", (req, res) => {
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 49)     const {title, description} = req.body;
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 50)     const sql = `
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 51)         UPDATE posts
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 52)         SET title = '${title}', description = '${description}'
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 53)         WHERE id = ${req.params.postId};
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 54)     `;
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 55) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 56)     // Execute the query
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 57)     db.query(sql, (err, result) => {
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 58)         if (err) {
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 59)             console.error(err);
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 60)             return res.status(500).json({ error: "Database error occurred." });
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 61)         }
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 62) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 63)         // Send a response back indicating success
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 64)         res.json({ message: "Post updated successfully."});
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 65)     });
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 66) })
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 67) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 68) router.get("/api/posts/", (req, res) => {
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 69)   const sql = "SELECT * FROM posts";
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 70)   db.query(sql, (err, results) => {
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 71)       if (err) throw err;
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 72)       res.json(results);
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 73)   });
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 74) })
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 75) 
b66d0afe (OutliersAdvantage 2023-09-22 15:21:26 -0400 76) module.exports = router;