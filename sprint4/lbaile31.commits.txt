./README.md
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500  1) # Fragrance Finder [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500  2) ## Members (Name - GitHub)
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500  3) - Lakelon Bailey - LakelonBailey
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500  4) - Stephen Souther - ssouther
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500  5) - William Duff - Shm00py
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500  6) - Jacob Kennedy - BlueNinja420
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500  7) - Kien Nguyen - KienKong
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500  8) - Faithful Odoi - BigFaith
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500  9) - Nolan Coffey - ncoffey3
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 10) 
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 11) ## Screenshot of Home Page:
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 12) ![image info](./frontend/src/assets/images/FragranceFinderHome.png)
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 13) ## Description
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 14) Fragrance Finder is a web application that allows users to find the best price of their favorite fragrances. Fragrance Finder compiles fragrance information from over 8 different fragrance sites to ensure that we provide users with the most up-to-date best prices. By creating an account and adding fragrances to their watchlist, users will recieve email communication regarding price drops on those fragrances. Users are also given several different metrics by which to sort and filter fragrances to find what they're looking for.
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 15) 
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 16) ## Technologies used
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 17) - Frontend
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 18)     - React
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 19)     - React Bootstrap
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 20)     - React Responsive Masonry
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 21)     - JSON Web Token (JWT)
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 22) - Backend
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 23)     - Sequelize (MySQL)
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 24)     - Express.js
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 25)     - JSON Web Token (JWT)
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 26) - Web Scraping (Python scripts)
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 27)     - Playwright
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 28)     - Beautiful Soup
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 29)     - Chromium
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 30) 
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 35) 2. Install the latest version of MySQL at [MySQL.com](https://www.mysql.com/downloads/)
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 36) ### Install Chromium
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 37) 3. Install the latest version of Chromium at [Chromium.org](https://www.chromium.org). Without Chromium installed, the web scrapers will not be able to function.
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 39) 4. Clone repository found at [github.com/utk-cs340-fall23/FragranceFinder](https://github.com/utk-cs340-fall23/FragranceFinder)
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 41) 5. From the root directory, run this command: `npm i; cd backend; npm i; cd ../frontend; npm i;`
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 55) ### Start development servers
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 59) ### Start regular server
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 63) 
38d0efd1 (LakelonBailey     2023-11-27 09:59:10 -0500 64) ## License


./LICENSE.txt
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500  1) MIT License
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500  2) 
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500  3) Copyright (c) 2023 Fragrance Finder
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500  4) 
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500  5) Permission is hereby granted, free of charge, to any person obtaining a copy
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500  6) of this software and associated documentation files (the "Software"), to deal
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500  7) in the Software without restriction, including without limitation the rights
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500  8) to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500  9) copies of the Software, and to permit persons to whom the Software is
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500 10) furnished to do so, subject to the following conditions:
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500 11) 
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500 12) The above copyright notice and this permission notice shall be included in all
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500 13) copies or substantial portions of the Software.
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500 14) 
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500 15) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500 16) IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500 17) FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500 18) AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500 19) LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500 20) OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
38d0efd1 (LakelonBailey 2023-11-27 09:59:10 -0500 21) SOFTWARE.


./backend/scrapers/MasterScript.py
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 22) HEADLESS = False
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 26)         *[scraper(max_items, HEADLESS) for scraper in scrapers]


./backend/scrapers/giftExpress.py
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  10) async def scrape_giftexpress(max_items, headless):
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  13)         browser = await p.chromium.launch(headless=headless)
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  15) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  18) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 122) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 166) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 275) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 319) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 320)                     df.loc[len(df)] = [str(womensBrand), str(womensTitle), str(womensConcentration), str(womensGender), str(womensSizeOZ),
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 322) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 324)


./backend/scrapers/fragrancenet.py
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  43) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  60) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  85) async def scrape_fragrancenet(max_items, headless):
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 102)             browser = await p.chromium.launch(headless=headless)
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 103) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 104) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 107) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 148) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 157) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 159) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 165) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 167) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 171) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 175)


./backend/scrapers/aura.py
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  10) async def scrape_aura(max_items, headless):
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  13)         browser = await p.chromium.launch(headless=headless)
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  15) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  32) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  37) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  40) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  42) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  47) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  52) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  57) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  61) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  65) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  72) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  76) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  81) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  88) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  91) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  95) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  99) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 104) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 108) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 111) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 118) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 122) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 130) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 139) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 146) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 160) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 175) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 177) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 179)                     df.loc[len(df)] = [str(brand), str(title), str(concentration), str(gender), str(sizeOZ),
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 181) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 198) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 203) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 206) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 208) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 213) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 218) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 223) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 227) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 231) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 238) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 242) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 247) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 254) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 257) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 261) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 265) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 270) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 274) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 277) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 284) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 288) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 296) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 305) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 312) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 314) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 328) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 343) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 345) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 347)                     df.loc[len(df)] = [str(brand), str(title), str(concentration), str(gender), str(sizeOZ),
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 349) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 351) 
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 353)


./backend/scrapers/maxaroma.py
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  17) async def scrape_maxaroma(max_items, headless):
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  24)             browser = await p.chromium.launch(headless = headless)


./backend/scrapers/jomashop.py
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  14) async def scrape_jomashop(max_items, headless):
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500  24)             browser = await p.chromium.launch(headless = headless)
daf450e3 (LakelonBailey 2023-11-27 10:31:07 -0500 171)