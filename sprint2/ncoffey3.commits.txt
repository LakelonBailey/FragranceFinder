.\backend\models\Fragrance.js
2c155a9b (ncoffey3          2023-10-16 18:14:54 -0400 16)     brand: {
2c155a9b (ncoffey3          2023-10-16 18:14:54 -0400 19)     title: {
2c155a9b (ncoffey3          2023-10-16 18:14:54 -0400 23)     concentration: {
422a491b (ncoffey3          2023-10-16 18:07:18 -0400 29)     gender: {
422a491b (ncoffey3          2023-10-16 18:07:18 -0400 30)       type: DataTypes.STRING
422a491b (ncoffey3          2023-10-16 18:07:18 -0400 31)     }, 
422a491b (ncoffey3          2023-10-16 18:07:18 -0400 43) module.exports = Fragrance;


.\backend\models\FragranceListing.js
422a491b backend/models/FragranceListing.js (ncoffey3          2023-10-16 18:07:18 -0400 30)     stock: {
422a491b backend/models/FragranceListing.js (ncoffey3          2023-10-16 18:07:18 -0400 33)     sizeoz: {
422a491b backend/models/FragranceListing.js (ncoffey3          2023-10-16 18:07:18 -0400 35)     },
422a491b backend/models/FragranceListing.js (ncoffey3          2023-10-16 18:07:18 -0400 36)     sizeml: {
422a491b backend/models/FragranceListing.js (ncoffey3          2023-10-16 18:07:18 -0400 59) module.exports = FragranceListing;


.\backend\scrapers\fragrancebuy.py
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400   1) # fragrancebuy.ca scraper
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400   2) import asyncio
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400   3) from playwright.async_api import async_playwright
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400   4) from bs4 import BeautifulSoup
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400   5) import re
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400   6) import json
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400   7) import pandas as pd
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400   8) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400   9) async def scrape_fragbuy(max_items):
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  10)     all_fragrances = []
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  11) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  12)     df = pd.DataFrame(columns=["brand", "title", "concentration", "gender", "size", "price", "link", "photoLink"])    
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  13) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  14)     try:
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  15)         async with async_playwright() as p:
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  16)             browser = await p.chromium.launch(headless = False)
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  17)             page = await browser.new_page()
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  18) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  19)             await page.goto('https://fragrancebuy.ca/collections/fullproductcatalogue?page=5&category_id=26315008')
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  20)             #await page.wait_for_timeout(25000)
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  21)             await page.wait_for_selector('div#products-grid.products-grid.fs-result-page-158897m')
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  22)             #await page.wait_for_selector('div', id='products-grid')
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  23)             print("Starting scroll!")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  24)             async def scroll_down():
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  25)                 for _ in range(15):
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  26)                     await page.evaluate('window.scrollBy(0,2000);')
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  27)                     await page.wait_for_timeout(1000)
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  28) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  29)             #await scroll_down()
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  30) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  31)             # FragranceBuy uses Shadow DOM meaning we need playwright to get the innerHtml and then parse it with BS4
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  32)             async def get_catalog_content():
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  33)                 catalog_page = await page.evaluate('''() => {
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  34)                     shadowroot = document.querySelector("#fast-simon-serp-app").shadowRoot.querySelector("#products-grid");
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  35)                     return shadowroot.innerHTML;
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  36)                 }''')
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  37)                 print("catalog page shadowrooted")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  38)                 return catalog_page
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  39)             
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  40)             catalog_content = await get_catalog_content()
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  41)             if (catalog_content): print("catalog content found")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  42)             else: print("No catalog contents!")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  43) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  44)             #while df.shape[0] < max_items:
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  45)             #catalog_content = await page.content()
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  46)             catalog = BeautifulSoup(catalog_content, 'html.parser')
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  47) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  48)             products = catalog.find_all('div', class_="product-card fs-results-product-card fs-product-card fs-result-page-13alr9n product-card-border fs-product-has-compare-price" )
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  49) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  50)             if products:
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  51)                 print("Found product grid")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  52)             else:
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  53)                 print("no products found")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  54) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  55)             for product in products: 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  56) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  57)                 link = product.find('a', class_="fs-product-main-image-wrapper")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  58)                 if link: 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  59)                     link = 'https://fragrancebuy.ca' + link.get('href')
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  60)                     print(link)
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  61)                 else:
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  62)                     print("No link")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  63)                     link = None
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  64)                 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  65)                 photoLink = product.find('img', class_="image fs-result-page-4kuhex")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  66)                 if photoLink: 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  67)                     photoLink = photoLink.get('src')
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  68)                     print(photoLink)
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  69)                 else: 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  70)                     print("No photolink")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  71)                     photoLink = None
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  72) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  73)                 brand = product.find('div', class_='vendor fs-product-vendor fs-result-page-1gfa8bs')
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  74)                 if brand: 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  75)                     brand = brand.text.strip()
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  76)                     print(brand)
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  77)                 else: 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  78)                     print("No brand")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  79)                     brand = None
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  80) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  81)                 title = product.find('span', class_='title fs-product-title fs-result-page-mihllj')
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  82)                 gender = None
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  83)                 if title:
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  84)                     title = title.text
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  85)                     print("title before strip")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  86)                     print(title)
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  87) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  88)                     # Gender
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  89)                     if re.search(r"For Man/Woman", title, re.IGNORECASE):
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  90)                         gender = "Unisex"
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  91)                     elif re.search(r"For Man", title, re.IGNORECASE):
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  92)                         gender = "Male"
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  93)                     elif re.search(r"For Woman", title, re.IGNORECASE):
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  94)                         gender = "Female"
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  95)                     else:
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  96)                         gender = None
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  97)                     
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  98)                     print(f"Gender: {gender}")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400  99) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 100)                     title = re.sub(r"For Man/Woman|For Man|For Woman", '', title, re.IGNORECASE)
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 101)                     title = re.sub(rf"{brand}|By {brand}", '', title, re.IGNORECASE)
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 102)                     title = title.strip()
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 103)                     print(f"Title after strip: {title}")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 104) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 105)                 else:
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 106)                     print("No title")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 107)                     title = None
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 108) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 109)                 price = product.find('div', class_="price fs-result-page-3sdl0h")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 110)                 if price:
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 111)                     price = (price.text.strip().split())[0]
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 112)                     print(price)
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 113)                 else: 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 114)                     print("No price")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 115)                     price = None
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 116) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 117)                 print("______________")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 118) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 119)                 concentration = None
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 120)                 size = None
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 121)                 df.loc[len(df)] = [brand, title, concentration, gender, size, price, link, photoLink]
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 122) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 123) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 124)         await browser.close()
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 125) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 126)     finally:
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 127)         df.to_json('data/fragBuy.json', orient='records')
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 128)         return df.to_json(orient="records")
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 129) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 130) 
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 131) if __name__ == "__main__":
a207eb1b (ncoffey3 2023-10-27 21:10:42 -0400 132)     asyncio.run(scrape_fragbuy(1))


.\backend\scrapers\MasterScript.py
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400  4) from maxaroma import scrape_maxaroma
5866e6e2 (ncoffey3      2023-10-27 00:21:24 -0400 17) async def get_data(max_items):
5866e6e2 (ncoffey3      2023-10-27 00:21:24 -0400 18)     jomashopData, maxaromaData = await asyncio.gather(
5866e6e2 (ncoffey3      2023-10-27 00:21:24 -0400 20)     )
5866e6e2 (ncoffey3      2023-10-27 00:21:24 -0400 21)     return jomashopData, maxaromaData
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 39)


.\backend\scrapers\maxaroma.py
dc4eada8 (ncoffey3      2023-10-11 03:44:44 -0400   1) # Maxaroma Webscraper
dc4eada8 (ncoffey3      2023-10-11 03:44:44 -0400   2) import asyncio
dc4eada8 (ncoffey3      2023-10-11 03:44:44 -0400   3) from playwright.async_api import async_playwright
dc4eada8 (ncoffey3      2023-10-11 03:44:44 -0400   4) from bs4 import BeautifulSoup
dc4eada8 (ncoffey3      2023-10-11 03:44:44 -0400   5) import re
017aaef1 (ncoffey3      2023-10-24 02:37:16 -0400   6) import json
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400   7) import pandas as pd
dc4eada8 (ncoffey3      2023-10-11 03:44:44 -0400   8) 
52a2228c (ncoffey3      2023-10-27 01:23:55 -0400   9) def valid_float(s):
52a2228c (ncoffey3      2023-10-27 01:23:55 -0400  10)     try:
52a2228c (ncoffey3      2023-10-27 01:23:55 -0400  11)         float(s)
52a2228c (ncoffey3      2023-10-27 01:23:55 -0400  12)         return True
52a2228c (ncoffey3      2023-10-27 01:23:55 -0400  13)     except ValueError:
52a2228c (ncoffey3      2023-10-27 01:23:55 -0400  14)         return False
52a2228c (ncoffey3      2023-10-27 01:23:55 -0400  15) 
52a2228c (ncoffey3      2023-10-27 01:23:55 -0400  16) 
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400  18) 
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400  19)     all_fragrances = []
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400  20) 
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400  21)     df = pd.DataFrame(columns=["brand", "title", "concentration", "gender", "size", "price", "link", "photoLink"])
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  23)         async with async_playwright() as p:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  24)             browser = await p.chromium.launch(headless = False)
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  25)             page = await browser.new_page()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  26) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  27)             # Max aroma best sellers list
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  28)             await page.goto('https://www.maxaroma.com/new-arrivals/p4u/special-na/view#&special-ts')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  29) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  30)             await page.wait_for_selector('ul.listing_grid')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  31) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  32)             # We need to open a separate page because for this website we must go to each individual fragrance page
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  33)             # So 1 page for the catalog of fragrances, and 1 page that goes to individual fragrance pages
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  34)             product_page = await browser.new_page()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  35) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  36)             # Prints the current list of fragrances, even if exiting early
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  37)             #atexit.register(print_fragrances)
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  39)                 catalog_content = await page.content()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  40)                 catalog = BeautifulSoup(catalog_content, 'html.parser')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  43)                 data_page = catalog.find('div', class_='pb-2', id='list-more')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  44)                 data_page = data_page.find('a', class_='list-more d-block')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  45)                 data_page = int(data_page['data-page'])
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  46)                 if (data_page >= 365):
96e8eb74 (ncoffey3      2023-10-26 02:47:25 -0400  47)                     #print(f"Data Page Num: {data_page}")
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  48)                     break
96e8eb74 (ncoffey3      2023-10-26 02:47:25 -0400  49)                 #print(f"Data Page: {data_page}")
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  50)                 # Wait 7 seconds then click top left corner to close popup ad
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  51)                 if data_page == 1:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  52)                     await page.wait_for_timeout(7000)
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  53)                     await page.mouse.click(0,0)
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  56)                 # We have 25 products per data_page, page 1 = 0-24, page 2 = 25-49, etc...
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  57)                 start_index = (data_page - 1) * 25
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  60) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  61)                     fragrance = {}
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  62)                     link = product.find('a')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  63) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  64)                     if link:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  65)                         link = link.get('href')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  66)                         await product_page.goto(link)
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  67)                         product_content = await product_page.content()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  68)                         product_parser = BeautifulSoup(product_content, 'html.parser')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  69) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  70)                         # name_div contains both the brand and the name of the fragrance
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  71)                         name_div = product_parser.find('div', class_='dtl_name asa')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  72)                         brand = name_div.find('h1').get_text()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  73)                         name = next(name_div.find('div').stripped_strings)
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  74) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  75)                         concentration = product_parser.find('small',class_='vtype').text.strip()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  76) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  77)                         # table_div contains size and gender
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  78)                         table_div = product_parser.find('div', class_='pb15')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  79)                         size_row = table_div.find('th', string='Size:')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  80)                         #th Size->td->div->size
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  81)                         size = size_row.find_next('td').find('div').text.strip()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  82)                         gender_row = table_div.find('th', string='Gender:')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  83) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  84)                         gender = gender_row.find_next('td').find('span').text.strip()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  85) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  86) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  87)                         price_div = product_parser.find('div',class_='dtl_salestext')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  88) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  90)                         photoLink = product_parser.find('img', class_='product-img')
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  91)                         photoLink = photoLink.get('src') if photoLink else None
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  92)                         if photoLink: fragrance['photoLink'] = photoLink
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  93)                         else: fragrance['photoLink'] = None
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  94)                         # The product will either be on sale or it won't be.
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  95)                         # If it is on sale, class pdetail_dealprice prodprice replaces the original price
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  96)                         # It also may contain "DEAL: " so we must .find('strong') to just get the price we want
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  97)                         if (price_div.find('span', class_='pdetail_dealprice prodprice')):
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  98)                             price = price_div.find('span', class_='pdetail_dealprice prodprice').find('strong').text.strip()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400  99)                             # $ removed from string and price stored as float
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 100)                             price_float = float(price[1:])
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 101)                         elif (price_div.find('strong', class_='prodprice')):
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 102)                             price = price_div.find('strong', class_='prodprice').text.strip()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 103)                             price_float = float(price[1:])
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 104) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 105)                         if not brand:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 106)                             brand = None
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 107)                         if not name:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 108)                             name = None
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 109)                         if not concentration:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 110)                             concentration = None
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 111)                         else: # Standardization of data for databasing
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 112)                             if concentration.lower() == "eau de toilette" or concentration.lower() == "edt":
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 113)                                 concentration = "EDT"
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 114)                             elif concentration.lower() == "eau de parfum" or concentration.lower() == "edp":
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 115)                                 concentration = "EDP"
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 116)                             elif concentration.lower() == "parfum" or concentration.lower() == "extrait de parfum":
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 117)                                 concentration = "Parfum"
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 118)                         if not size:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 119)                             size = None
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 120)                         else:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 121)                             size = size.lower()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 123)                             # If there is no space between the number and the size specifier one is added
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 124)                             # 3.4oz becomes 3.4 oz
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 125)                             size = re.sub(r'(?<=[0-9])oz', ' oz', size)
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 126)                             size = re.sub(r'(?<=[0-9])ml', ' ml', size)
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 127)                             split_size = size.split()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 128) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 129)                             if (len(split_size) >= 2):
52a2228c (ncoffey3      2023-10-27 01:23:55 -0400 131)                                 if (split_size[1] == "oz" and valid_float(split_size[0])):
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 132)                                     sizeoz = float(split_size[0])
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 133)                                     fragrance["sizeoz"] = sizeoz
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 134)                                     # ml = oz * 29.5735
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 135)                                     # Ml stored with no decimals places
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 136)                                     fragrance["sizeml"] = float(int(sizeoz * 29.5736))
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 137) 
52a2228c (ncoffey3      2023-10-27 01:23:55 -0400 138)                                 elif (split_size[1] == "ml" and valid_float(split_size[0])):
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 139)                                     sizeml = float(split_size[0])
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 140)                                     fragrance["sizeml"] = sizeml
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 141)                                     # oz = ml * 0.033814
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 142)                                     # Oz stored to 2 decimal places
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 143)                                     fragrance["sizeoz"] = round(sizeml * 0.033814, 2)
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 144)                                 else:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 145)                                     fragrance["sizeoz"] = None
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 146)                                     fragrance["sizeml"] = None
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 147)                             else:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 148)                                 fragrance["sizeoz"] = None
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 149)                                 fragrance["sizeml"] = None
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 150) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 151) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 152)                         if not price:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 153)                             price = None
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 154)                         if not gender:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 155)                             gender = None
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 156)                         else:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 157)                             if gender == "Men":
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 158)                                 gender = "Male"
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 159)                             elif gender == "Women":
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 160)                                 gender = "Female"
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 161)                             else:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 162)                                 gender = "Unisex"
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 163) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 164)                         fragrance["brand"] = brand
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 165)                         fragrance["title"] = name
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 166)                         fragrance["concentration"] = concentration
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 167)                         fragrance["price"] = price_float
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 168)                         fragrance["gender"] = gender
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 169)                         fragrance["link"] = link
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 170) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 171)                         all_fragrances.append(fragrance)
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 172)                         df.loc[len(df)] = [brand, name, concentration, gender, size, price, link, photoLink]
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 173)                         # Prints the current list of fragrances, even if exiting early
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 174) 
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 175)             await browser.close()
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 176)     finally:
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 177) 
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 178)             """for fragrance in all_fragrances:
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 179)                 print(f"Photo Link: {fragrance['photoLink']}")
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 180)                 print(f"Brand: {fragrance['brand']}")
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 181)                 print(f"Title: {fragrance['title']}")
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 182)                 print(f"Concentration: {fragrance['concentration']}")
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 183)                 print(f"Sizeoz {fragrance['sizeoz']}")
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 184)                 print(f"Sizeml: {fragrance['sizeml']}")
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 185)                 print(f"Price: {fragrance['price']}")
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 186)                 print(f"Gender: {fragrance['gender']}")
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 187)                 print(f"Link: {fragrance['link']}")
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 188)                 print("-----")"""
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 189) 
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 190)             return df.to_json(orient="records")
2c24ad09 (ncoffey3      2023-10-25 21:24:37 -0400 191) 
dc4eada8 (ncoffey3      2023-10-11 03:44:44 -0400 193) 
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 194) #if __name__ == "__main__":
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 195) #    asyncio.run(scrape_maxaroma())


.\backend\scrapers\scrapingdemo.py
a9ad1f4a (ncoffey3 2023-10-11 05:20:02 -0400  1) import asyncio
a9ad1f4a (ncoffey3 2023-10-11 05:20:02 -0400  2) from maxaroma import scrape_maxaroma
a9ad1f4a (ncoffey3 2023-10-11 05:20:02 -0400  3) from jomashop import scrape_jomashop
a9ad1f4a (ncoffey3 2023-10-11 05:20:02 -0400  4) 
a9ad1f4a (ncoffey3 2023-10-11 05:20:02 -0400  5) async def main():
a9ad1f4a (ncoffey3 2023-10-11 05:20:02 -0400  6)     await asyncio.gather(
a9ad1f4a (ncoffey3 2023-10-11 05:20:02 -0400  7)         scrape_jomashop(),
a9ad1f4a (ncoffey3 2023-10-11 05:20:02 -0400  8)         scrape_maxaroma()
a9ad1f4a (ncoffey3 2023-10-11 05:20:02 -0400  9)     )
a9ad1f4a (ncoffey3 2023-10-11 05:20:02 -0400 10) 
a9ad1f4a (ncoffey3 2023-10-11 05:20:02 -0400 11) if __name__ == "__main__":
a9ad1f4a (ncoffey3 2023-10-11 05:20:02 -0400 12)     asyncio.run(main())


.\backend\scripts\seedData.js
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 30)         // Create map key used to determine unique fragrances
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 31)         const mapKey = getFragranceMapKey(item);
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 32)         let fragrance = fragranceMap.get(mapKey);
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 33) 
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 34)         // If fragrance doesn't exist, create it.
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 35)         if (!fragrance) {
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 37)             fragranceMap.set(mapKey, fragrance);
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 38)         }
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 39) 
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 40)         fragranceListings.push({
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 41)             fragranceId: fragrance.id,
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 42)             ...item
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 43)         });
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 44)     }
76d37d4f (ncoffey3      2023-10-26 01:29:11 -0400 52) loadFragrances();