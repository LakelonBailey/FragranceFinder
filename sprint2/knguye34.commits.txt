./backend/scrapers/fragrancenet.py
739f7596 (KienKong 2023-10-25 22:02:10 -0400   1) # Kien Nguyen
739f7596 (KienKong 2023-10-25 22:02:10 -0400   2) # Last updated: 10-25-23
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400   3) import asyncio
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400   4) import re
82665b89 (KienKong 2023-10-20 13:03:51 -0400   5) import os
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400   6) from playwright.async_api import async_playwright
09dc8cb5 (Kien     2023-10-10 23:39:56 -0400   7) from bs4 import BeautifulSoup
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400   8) import pandas as pd
09dc8cb5 (Kien     2023-10-10 23:39:56 -0400   9)
09dc8cb5 (Kien     2023-10-10 23:39:56 -0400  10) # The base URL of the website
09dc8cb5 (Kien     2023-10-10 23:39:56 -0400  11) baseurl = "https://www.fragrancenet.com/"
09dc8cb5 (Kien     2023-10-10 23:39:56 -0400  12) # The number of pages to scrape
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  13) num_pages = 1
09dc8cb5 (Kien     2023-10-10 23:39:56 -0400  14)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  15) # List of brand names to ignore in product names
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  16) brand_names = ["Dolce & Gabbana", "Gianni Versace"]  # Add more brand names as needed
09dc8cb5 (Kien     2023-10-10 23:39:56 -0400  17)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  18) # playing with getting the pricing after clicking on each button (to see real pricing)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  19) """
739f7596 (KienKong 2023-10-25 22:02:10 -0400  20) async def get_prices_for_boxes(page):
739f7596 (KienKong 2023-10-25 22:02:10 -0400  21)     prices = {}
739f7596 (KienKong 2023-10-25 22:02:10 -0400  22)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  23)     # Find the dimensions element
739f7596 (KienKong 2023-10-25 22:02:10 -0400  24)     dimensions_element = await page.wait_for_selector('.dimensions.solo')
739f7596 (KienKong 2023-10-25 22:02:10 -0400  25)     aria_owns = await dimensions_element.get_attribute('aria-owns')
739f7596 (KienKong 2023-10-25 22:02:10 -0400  26)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  27)     # Extract and split the box IDs
739f7596 (KienKong 2023-10-25 22:02:10 -0400  28)     box_ids = aria_owns.split()
739f7596 (KienKong 2023-10-25 22:02:10 -0400  29)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  30)     for box_id in box_ids:
739f7596 (KienKong 2023-10-25 22:02:10 -0400  31)         attribute_selector = f'[aria-owns="{box_id}"]'
739f7596 (KienKong 2023-10-25 22:02:10 -0400  32)         box_element = await page.wait_for_selector(attribute_selector)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  33)         await box_element.click()
739f7596 (KienKong 2023-10-25 22:02:10 -0400  34)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  35)         # Wait for the price element to become visible
739f7596 (KienKong 2023-10-25 22:02:10 -0400  36)         await page.wait_for_selector(f'{box_id}[aria-selected="true"]')
739f7596 (KienKong 2023-10-25 22:02:10 -0400  37)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  38)         # Extract the price
739f7596 (KienKong 2023-10-25 22:02:10 -0400  39)         price_element = await page.querySelector('.pricing[data-price]')
739f7596 (KienKong 2023-10-25 22:02:10 -0400  40)         price = await price_element.innerText()
739f7596 (KienKong 2023-10-25 22:02:10 -0400  41)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  42)         prices[box_id] = price
739f7596 (KienKong 2023-10-25 22:02:10 -0400  43)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  44)     return prices
739f7596 (KienKong 2023-10-25 22:02:10 -0400  45) """
739f7596 (KienKong 2023-10-25 22:02:10 -0400  46)
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400  47) async def get_product_info(browser, product, df):
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  48)     # Extract the link to the product
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  49)     link = product.find('a', href=True)['href']
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400  50)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  51)     # Create a new page in the browser
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  52)     page = await browser.new_page()
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  53)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  54)     # Navigate to the product page
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  55)     await page.goto(link)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  56)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  57)     # Wait for the page to load
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  58)     await page.wait_for_selector('.pricing')
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  59)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  60)     # Extract the HTML content of the product page
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  61)     product_page_data = await page.content()
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  62)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  63)     # Parse the product page using BeautifulSoup
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  64)     product_soup = BeautifulSoup(product_page_data, 'html.parser')
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  65)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  66)     # Extract pricing and size details
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  67)     pricing_elements = product_soup.find_all('div', class_='variantText solo')
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  68)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  69)     for pricing_element in pricing_elements:
60e4233e (KienKong 2023-10-25 22:32:48 -0400  70)         # Extract the product size in ounces from the data-dim-value attribute
60e4233e (KienKong 2023-10-25 22:32:48 -0400  71)         size_oz = pricing_element['data-dim-value']
60e4233e (KienKong 2023-10-25 22:32:48 -0400  72)         # Convert the size to milliliters using the conversion factor
60e4233e (KienKong 2023-10-25 22:32:48 -0400  73)         size_ml = float(size_oz) * 29.5735
739f7596 (KienKong 2023-10-25 22:02:10 -0400  74)
82665b89 (KienKong 2023-10-20 13:03:51 -0400  75)         # Extract the original price
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  76)         price = pricing_element.find('div', class_='pricing').text.strip()
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400  77)
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400  78)         # Add the details to the DataFrame
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400  79)         #df.loc[len(df)] = [brand, name, concentration, gender, size_oz, price, link, photoLink]       
60e4233e (KienKong 2023-10-25 22:32:48 -0400  80)         print(f"Price: {price:}, Size (oz): {size_oz}, Size (mL): {size_ml:.2f}")
739f7596 (KienKong 2023-10-25 22:02:10 -0400  81)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  82)     """
739f7596 (KienKong 2023-10-25 22:02:10 -0400  83)     # Get pricing and size details from the product page
739f7596 (KienKong 2023-10-25 22:02:10 -0400  84)     prices = await get_prices_for_boxes(page)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  85)     # Process and print the prices
739f7596 (KienKong 2023-10-25 22:02:10 -0400  86)     for box_id, price in prices.items():
739f7596 (KienKong 2023-10-25 22:02:10 -0400  87)         print(f"Box ID: {box_id}, Price: {price}")
739f7596 (KienKong 2023-10-25 22:02:10 -0400  88)
739f7596 (KienKong 2023-10-25 22:02:10 -0400  89)     print("\n")
739f7596 (KienKong 2023-10-25 22:02:10 -0400  90)     """
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  91)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  92)     # Close the product page
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  93)     await page.close()
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  94)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  95) async def main():
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  96)     # Launch the Playwright browser
82665b89 (KienKong 2023-10-20 13:03:51 -0400  97)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400  98)     async with async_playwright() as p:
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400  99)         df = pd.DataFrame(columns=["brand", "title", "concentration", "gender", "size", "price", "link", "photoLink"])
82665b89 (KienKong 2023-10-20 13:03:51 -0400 100)         # trying to get it run through without incognito (to grab proper pricing)
82665b89 (KienKong 2023-10-20 13:03:51 -0400 101)         # but it doesn't bypass through the bot security check
82665b89 (KienKong 2023-10-20 13:03:51 -0400 102)         """
82665b89 (KienKong 2023-10-20 13:03:51 -0400 103)         app_data_path = os.getenv("LOCALAPPDATA")
82665b89 (KienKong 2023-10-20 13:03:51 -0400 104)         user_data_path = os.path.join(app_data_path, 'Chromium\\User_Data\\Default')
82665b89 (KienKong 2023-10-20 13:03:51 -0400 105)         context = await p.chromium.launch_persistent_context(user_data_path, headless=False, channel="chrome", user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36")
82665b89 (KienKong 2023-10-20 13:03:51 -0400 106)         # Create a new page in the browser
82665b89 (KienKong 2023-10-20 13:03:51 -0400 107)         page = await context.new_page()
82665b89 (KienKong 2023-10-20 13:03:51 -0400 108)         """
82665b89 (KienKong 2023-10-20 13:03:51 -0400 109)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 110)         browser = await p.chromium.launch(headless=False)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 111)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 112)         # Create a new page in the browser
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 113)         page = await browser.new_page()
82665b89 (KienKong 2023-10-20 13:03:51 -0400 114)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 115)         # Iterate through the specified number of pages
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 116)         for page_number in range(1, num_pages + 1):
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 117)             # Generate the search URL for each page
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 118)             search_url = f"https://www.fragrancenet.com/fragrances?&page={page_number}"
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 119)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 120)             # Navigate to the search URL
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 121)             await page.goto(search_url)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 122)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 123)             # Wait for the page to load
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 124)             await page.wait_for_selector('.resultItem.heightSync')
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 125)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 126)             # Extract the HTML content of the result set
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 127)             product_data = await page.inner_html('#resultSet')
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 128)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 129)             # Parse the HTML content using BeautifulSoup
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 130)             soup = BeautifulSoup(product_data, 'html.parser')
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 131)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 132)             # Find all product items on the page
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 133)             product_items = soup.find_all('div', class_='resultItem heightSync')
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 134)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 135)             # Iterate through each product on the page
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 136)             for product in product_items:
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 137)                 # Extract the name of the product
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 138)                 name = product.find('span', class_='brand-name').text.strip()
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 139)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 140)                 # Check if any brand names should be ignored
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 141)                 for brand_name in brand_names:
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 142)                     name = name.replace(brand_name, "").strip()
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 143)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 144)                 # Extract the brand with a try-except block
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 145)                 try:
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 146)                     brand_element = product.find('p', class_='des').find('a')
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 147)                     brand = brand_element.text.strip()
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 148)                 except AttributeError:
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 149)                     brand = "Brand not available"
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 150)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 151)                 # Extract the gender information
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 152)                 gender = product.find('span', class_='gender-badge').text.strip()
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 153)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 154)                 # Extract the link to the product
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 155)                 link = product.find('a', href=True)['href']
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 156)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 157)                 # Extract the savings information
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 158)                 savings = product.find('span', class_='savings').text.strip()
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 159)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 160)                 # Extract the ratings information
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 161)                 ratings = product.find('div', class_='starRatingContain').find('span', class_='sr-only').text.strip()
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 162)
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 163)                 photoLink = product.find('img',src=True)['src']
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 164)
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 165)                 concentration = product.find('p', class_='desc').text.strip()
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 166)                 if(concentration == "eau de toilette"):
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 167)                     concentration = "EDT"
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 168)                 elif(concentration == "eau de parfum"):
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 169)                     concentration = "EDP"
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 170)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 171)                 # Print the extracted data
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 172)                 print(f"Name: {name}")
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 173)                 print(f"Brand: {brand}")
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 174)                 print(f"Gender: {gender}")
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 175)                 print(f"Link: {link}")
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 176)                 print(f"Savings: {savings}")
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 177)                 print(f"Ratings: {ratings}")
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 178)                 print(f"Image: {photoLink}")
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 179)                 print(f"Concentration: {concentration}")
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 179)                 print(f"Concentration: {concentration}")
82665b89 (KienKong 2023-10-20 13:03:51 -0400 180)
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 181)                 await get_product_info(browser, product, df)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 182)                 print("\n")
82665b89 (KienKong 2023-10-20 13:03:51 -0400 183)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 184)         # Close the browser when done
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 185)         await browser.close()
2ae29be4 (KienKong 2023-10-26 22:59:42 -0400 186)     #return df.to_json(orient="records")
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 187)
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 188) # Run the main function
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 189) if __name__ == "__main__":
0d46aed0 (KienKong 2023-10-20 11:53:58 -0400 190)     asyncio.run(main())
